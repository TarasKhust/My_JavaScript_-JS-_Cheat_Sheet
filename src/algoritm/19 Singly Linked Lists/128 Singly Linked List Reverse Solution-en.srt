1
00:00:00,180 --> 00:00:00,680
All right.

2
00:00:00,720 --> 00:00:03,760
So let's implement reverse on our singly linked list.

3
00:00:03,780 --> 00:00:06,820
The first thing I want to show you just to make this a little easier.

4
00:00:06,990 --> 00:00:09,200
I did a method called Prince.

5
00:00:09,210 --> 00:00:12,640
This was not something you were expected to do or I didn't even mention it until now.

6
00:00:12,810 --> 00:00:17,790
But it's just going to make it easier for us to see that our reverse worked because it's kind of annoying

7
00:00:18,060 --> 00:00:23,640
when all that we have is the head or the tail to have to you know iterate over it or check if we did

8
00:00:23,640 --> 00:00:28,170
it correctly because for all we know we might have swapped the head in the tail but the inside might

9
00:00:28,170 --> 00:00:29,280
be totally wrong.

10
00:00:29,280 --> 00:00:33,660
So I made a very timid method called print and it's very very simple.

11
00:00:33,660 --> 00:00:35,270
All it does is it returns.

12
00:00:35,290 --> 00:00:36,560
Eric actually doesn't return anything.

13
00:00:36,560 --> 00:00:42,200
It prints cancels out logs all the values in our linked list in order in an array.

14
00:00:42,360 --> 00:00:43,860
So why an array.

15
00:00:43,860 --> 00:00:47,580
It's kind of defeats the point of using a length this time to turn it into an array.

16
00:00:47,670 --> 00:00:50,660
But it's just the easiest way to print it in one line.

17
00:00:50,730 --> 00:00:53,350
I could have done a string of guessing concatenated everything.

18
00:00:53,490 --> 00:00:56,340
But this is just a super short thing this is not about being efficient.

19
00:00:56,340 --> 00:00:58,980
It's just purely to help us see what's happening.

20
00:00:58,980 --> 00:01:02,220
So with my current list here's the values in there.

21
00:01:02,310 --> 00:01:08,210
If i do list print it just gives me this array and I can see the order that they're in.

22
00:01:08,550 --> 00:01:11,290
So when we do let's start reverse and then print again.

23
00:01:11,400 --> 00:01:15,280
We want to see the opposite order so that we know it worked.

24
00:01:15,350 --> 00:01:17,650
Anyway let's get started on reverse.

25
00:01:17,940 --> 00:01:20,580
So I'll add our reverse method in here.

26
00:01:20,780 --> 00:01:25,650
And the first thing that all do remember we have three variables that we're going to try and keep track

27
00:01:25,650 --> 00:01:27,390
of the current node.

28
00:01:27,570 --> 00:01:32,250
The next variable thing that that's ahead of it and the previous variable the thing that's behind it

29
00:01:32,310 --> 00:01:34,470
that we're going to connect to.

30
00:01:34,860 --> 00:01:36,920
So I have to start somewhere.

31
00:01:37,020 --> 00:01:43,260
I'm going to make my node variable and started at the head head then I'm going to swap the head and

32
00:01:43,260 --> 00:01:43,830
the tail.

33
00:01:43,830 --> 00:01:50,620
So this does head now becomes this tail this tail equals node.

34
00:01:50,640 --> 00:01:55,710
I can't just say this dot tail equals the stuff head because this dot head is now changed.

35
00:01:55,710 --> 00:01:56,530
So I made it.

36
00:01:56,550 --> 00:01:58,160
This is just a shortcut.

37
00:01:58,360 --> 00:02:03,930
Serving as a temporary variable but we're also going to use this node variable in our loop.

38
00:02:03,930 --> 00:02:08,850
So what we need to do now is starter loop and instead of a while loop because I've been doing that in

39
00:02:08,880 --> 00:02:13,920
all of my solutions I'm going to do a for loop just to show you that you can because we're keeping track

40
00:02:13,920 --> 00:02:15,100
of the length.

41
00:02:15,300 --> 00:02:17,570
So I'll do four of our equals zero.

42
00:02:17,700 --> 00:02:21,310
I asked less than this length I plus plus.

43
00:02:21,330 --> 00:02:26,370
So now we have the bulk of our logic where we're going to go through and we've established that this

44
00:02:26,370 --> 00:02:27,570
is node to start.

45
00:02:27,570 --> 00:02:28,900
This is our very beginning.

46
00:02:29,040 --> 00:02:35,090
Now we're going to make a variable called next instead of equal to this node next.

47
00:02:35,340 --> 00:02:39,570
And then we're also going to use a previous variable however at the beginning previous is going to be

48
00:02:39,580 --> 00:02:41,980
null because there's nothing in front of it.

49
00:02:42,180 --> 00:02:45,600
So we'll started at an all but we'll update it as we go.

50
00:02:45,630 --> 00:02:53,730
So let's do that now I'm going to make a variable called previous and that will be null and need the

51
00:02:53,730 --> 00:02:54,970
variable keyword far.

52
00:02:55,050 --> 00:02:56,890
And also do next.

53
00:02:56,940 --> 00:03:00,210
We can set that to no or we could just leave it like this.

54
00:03:00,210 --> 00:03:06,330
The reason we want previous definitely to be know is that we need to make sure that the end of our list

55
00:03:06,540 --> 00:03:09,900
the tail next is no.

56
00:03:10,380 --> 00:03:14,990
We don't want it to be undefined or something else we want know because that's how Currently the tale

57
00:03:14,990 --> 00:03:15,550
is set up.

58
00:03:15,560 --> 00:03:17,710
If there is no next it set to No.

59
00:03:18,210 --> 00:03:18,670
All right.

60
00:03:18,900 --> 00:03:24,400
So now what we do is we go through the list and we save the next variable so we already have next.

61
00:03:24,480 --> 00:03:29,930
Next is going to be equal to whatever we're currently looking at dot next.

62
00:03:31,710 --> 00:03:33,220
So that's what we showed here.

63
00:03:33,240 --> 00:03:38,250
If this is what we're currently looking at we're going to take it next and save it in our next variable

64
00:03:38,670 --> 00:03:44,190
so that we can move on to it in a little bit then what we're going to do is take whatever the previous

65
00:03:44,190 --> 00:03:49,540
value is and set this node next to be that previous value.

66
00:03:49,560 --> 00:03:50,740
So it starts at No.

67
00:03:50,750 --> 00:03:52,640
So the very first time is some very exciting.

68
00:03:52,650 --> 00:03:56,980
We're going to say node next equals previous.

69
00:03:57,210 --> 00:03:58,400
So equals no.

70
00:03:58,410 --> 00:04:01,010
The very first time through but that will change.

71
00:04:01,020 --> 00:04:03,450
Now all we do is we shift things over.

72
00:04:03,480 --> 00:04:05,010
We say OK.

73
00:04:05,100 --> 00:04:06,920
So this was our current node.

74
00:04:07,290 --> 00:04:13,020
Well now our current node is going to be whatever the next node was in our previous node is going to

75
00:04:13,020 --> 00:04:16,520
be whatever the node used to be current used to be.

76
00:04:16,560 --> 00:04:22,530
So that's simple at the end we're just going to say previous now equals the current node and the current

77
00:04:22,530 --> 00:04:29,680
node now equals the next node we just move one thing over and then THAT'S ACTUALLY it.

78
00:04:29,910 --> 00:04:31,590
Let's return this at the end.

79
00:04:31,590 --> 00:04:34,740
We'll verify that this works of course.

80
00:04:34,740 --> 00:04:36,690
I know it can be conceptually confusing.

81
00:04:36,690 --> 00:04:42,380
So we'll try and step through it one time but let's just make sure it works first.

82
00:04:42,600 --> 00:04:49,010
When I run the code and we look at our list print right now looks good.

83
00:04:49,250 --> 00:04:58,030
Let's do that reverse and printed again and let's just make sure 100 to 0 1 to fifty.

84
00:04:58,040 --> 00:04:59,570
Three fifty nine nine nine.

85
00:04:59,760 --> 00:05:01,390
It's totally reversed.

86
00:05:01,800 --> 00:05:02,440
OK.

87
00:05:02,820 --> 00:05:04,790
So what actually happened here.

88
00:05:05,070 --> 00:05:11,790
If we look at the initial state of put this in comments if you understand this I'm not going to teach

89
00:05:11,790 --> 00:05:15,050
anything new here but if you want to walk through and do that right now.

90
00:05:15,480 --> 00:05:20,110
So we started with this and we have three variables that we're keeping track of.

91
00:05:20,130 --> 00:05:22,070
We have one that we're calling node.

92
00:05:22,440 --> 00:05:23,580
We have one that we're calling.

93
00:05:23,640 --> 00:05:25,170
I'm going to do it just like this.

94
00:05:25,170 --> 00:05:31,130
We have Noad previous and next previous starts at no index doesn't really started anything.

95
00:05:31,230 --> 00:05:33,780
It doesn't matter because we assign it right at the beginning.

96
00:05:33,880 --> 00:05:37,740
The very first time through node is equal to this dot head right here.

97
00:05:37,740 --> 00:05:41,860
So now we're going to set next equal to dot next which is 2 0 1.

98
00:05:41,880 --> 00:05:43,820
So this becomes next right here.

99
00:05:44,160 --> 00:05:50,300
Then we say node dot next is actually previous which is not.

100
00:05:51,000 --> 00:05:55,500
So in our new list that we're building we have 100 and we're having it.

101
00:05:55,500 --> 00:05:58,180
Next we're having it point to no.

102
00:05:58,380 --> 00:06:00,330
So there's nothing there.

103
00:06:00,330 --> 00:06:05,420
Then we shift previous to now be 100.

104
00:06:05,460 --> 00:06:06,730
So this is previous.

105
00:06:06,750 --> 00:06:09,300
And then reset node to be what next to us.

106
00:06:09,300 --> 00:06:11,250
So this is now Noad.

107
00:06:11,640 --> 00:06:14,620
And then we start the process over OK.

108
00:06:14,810 --> 00:06:17,870
So then we go next equals Noad next.

109
00:06:17,960 --> 00:06:24,480
Well here's Noad so no doubt next gives us 250 node next.

110
00:06:24,560 --> 00:06:26,600
It's now reset to be previous.

111
00:06:26,660 --> 00:06:34,730
So that means 2 0 1 dot next is going to be 100 which is the current value previous So that's the same

112
00:06:34,730 --> 00:06:40,070
as us drawing this arrow right here we're connecting to one dot next to the rest of the list.

113
00:06:40,310 --> 00:06:42,380
Then we update previous to be the node.

114
00:06:42,620 --> 00:06:48,110
So this becomes previous Then we set node to be next.

115
00:06:48,160 --> 00:06:52,830
So 250 becomes our node and we start over again.

116
00:06:52,840 --> 00:06:57,670
You can drop out of this video at any point but if you'd like to stay in for the long haul we go through

117
00:06:57,670 --> 00:07:01,240
again next equals no dot next.

118
00:07:01,240 --> 00:07:07,270
So this becomes next 350 does node next equals previous.

119
00:07:07,270 --> 00:07:12,040
So now we're connecting to 50 Dunton next to 0 1.

120
00:07:12,430 --> 00:07:15,290
So that's us drawing this arrow.

121
00:07:15,430 --> 00:07:17,430
We're building it backwards one thing at a time.

122
00:07:17,470 --> 00:07:23,730
Now previous equals this node is going to get rid of next for a second and just shift these over previously

123
00:07:23,740 --> 00:07:25,180
called node node equals.

124
00:07:25,180 --> 00:07:28,720
Next we go through again next equals node next.

125
00:07:28,720 --> 00:07:34,140
So that's 9 9 9 node next equals previous or 350.

126
00:07:34,240 --> 00:07:40,870
Next is 250 350 now points to 50 previous equals node.

127
00:07:41,020 --> 00:07:44,680
So we shift all this over just like this.

128
00:07:44,890 --> 00:07:45,650
Perfect.

129
00:07:45,670 --> 00:07:47,610
Now we take next.

130
00:07:47,650 --> 00:07:48,810
Which is going to be no doubt next.

131
00:07:48,820 --> 00:07:55,280
So it's next over here it's it's no there is no doubt next node next ECOs previous.

132
00:07:55,300 --> 00:07:59,350
So this node next is now equal to 350.

133
00:07:59,620 --> 00:08:01,040
So that's our final connection.

134
00:08:01,040 --> 00:08:04,880
Nine nine nine points to that then.

135
00:08:05,100 --> 00:08:08,350
This doesn't really matter because we're done but previous equals node.

136
00:08:08,350 --> 00:08:11,400
So we shift these all over just like this.

137
00:08:11,680 --> 00:08:15,230
But we're now done in our loop has finished executing.

138
00:08:15,340 --> 00:08:18,300
It doesn't keep going because we used a for loop based off of the length.

139
00:08:18,310 --> 00:08:19,700
This loop runs five times.

140
00:08:19,720 --> 00:08:22,640
One two three four five.

141
00:08:22,720 --> 00:08:28,550
If our list is five items long and looks like we're done what am saying.

142
00:08:28,570 --> 00:08:29,720
We are done.

143
00:08:29,800 --> 00:08:30,610
It works.

144
00:08:30,610 --> 00:08:41,180
We can just double check one more time let's do list print and then we do list that reverse the stop

145
00:08:41,200 --> 00:08:43,370
print again opposite order.

146
00:08:43,420 --> 00:08:48,650
Let's look at the head should be set up correctly and then look at the tail.

147
00:08:48,760 --> 00:08:51,200
It should have no as it's next.

148
00:08:51,520 --> 00:08:54,880
OK that was a tough one I know is a tough one for me to explain at least.

149
00:08:54,880 --> 00:08:57,900
Hopefully you were able to understand what I was saying.

150
00:08:58,210 --> 00:08:58,620
OK.

