1
00:00:00,090 --> 00:00:03,890
Welcome back to the last video on linked lists or on singly linked lists.

2
00:00:03,900 --> 00:00:04,530
Excuse me.

3
00:00:04,530 --> 00:00:09,060
Next we're talking about doubly linked to lists but we're done with singly linked lists and I'm getting

4
00:00:09,060 --> 00:00:10,840
real tired of saying that word right now.

5
00:00:10,890 --> 00:00:16,680
So let's wrap up by talking about the Big-O notation of the common operations things like insertion

6
00:00:17,100 --> 00:00:22,060
deletion or removal searching and accessing data and also compare it to an array.

7
00:00:22,290 --> 00:00:25,900
And then we'll do a quick recap and move on to doubling first.

8
00:00:25,920 --> 00:00:30,870
And at the end of that section we'll do the same thing where we'll compare not only doubling first two

9
00:00:30,870 --> 00:00:36,210
arrays but also to singly linked lists and we'll see their unique strengths and weaknesses.

10
00:00:36,210 --> 00:00:37,500
All right.

11
00:00:37,500 --> 00:00:43,740
So let's start with insertion in a singly linked list inserting things is really easy right.

12
00:00:43,740 --> 00:00:50,880
We either push it onto the very end all that we had to do was take the current and the tail make a new

13
00:00:50,880 --> 00:00:55,550
node and just set the table next to be that new node and then update the tail.

14
00:00:55,680 --> 00:00:58,610
Same thing at the beginning if you want to add something at the very beginning.

15
00:00:58,710 --> 00:01:03,430
We just make a new node and we said it's next to the current head and then move the head.

16
00:01:03,600 --> 00:01:05,260
So it takes constant time.

17
00:01:05,280 --> 00:01:08,570
It doesn't matter if our list is a million items long or 10 items long.

18
00:01:08,670 --> 00:01:12,810
It takes the same amount of work same amount of time to add in a new item.

19
00:01:12,810 --> 00:01:15,040
Now that's not the case with arrays.

20
00:01:15,060 --> 00:01:20,700
Remember that if an array is a thousand or a million items long Let's go with a million and I add something

21
00:01:20,700 --> 00:01:23,390
to the very beginning to the index 0.

22
00:01:23,400 --> 00:01:30,630
I have to shift every single index over and rewrite it all the way down to 1000 or 1 million in one

23
00:01:31,110 --> 00:01:37,830
or if I add to the very end of an array then yes it takes constant time but on average if we were going

24
00:01:37,830 --> 00:01:39,740
to take the average it's 0.

25
00:01:39,840 --> 00:01:42,010
And where is the length of the array.

26
00:01:42,210 --> 00:01:49,140
So singling us win that battle as far as inserting data much faster constant time versus an array where

27
00:01:49,140 --> 00:01:55,200
the average is 0 of and then we get to removal taking things out of full length list.

28
00:01:55,200 --> 00:02:01,120
And this depends on where we are removing from if we're removing from the very beginning.

29
00:02:01,200 --> 00:02:02,040
Super easy.

30
00:02:02,230 --> 00:02:08,880
That's one constant time all that we do is we've already seen we take the current head and we just said

31
00:02:08,910 --> 00:02:15,030
it's next to be the next head and then we take the old head and set it up next to be null.

32
00:02:15,090 --> 00:02:16,980
We chop that tie.

33
00:02:17,190 --> 00:02:21,830
But if we're removing from the very end it becomes difficult in a singly linked list.

34
00:02:21,990 --> 00:02:27,420
If we're popping because we need to find the item right before the last item right before the tail and

35
00:02:27,420 --> 00:02:29,830
that involves iterating the entire list.

36
00:02:29,850 --> 00:02:35,940
So in our best case for removing from the beginning of one of the worst case of moving from the end

37
00:02:36,120 --> 00:02:38,980
there's a million items we're going to have to go.

38
00:02:39,210 --> 00:02:43,440
Well we're not going to go to the million we're going to have to go to one before the millions in order

39
00:02:43,440 --> 00:02:45,350
to remove that last item.

40
00:02:45,360 --> 00:02:46,760
Next up searching.

41
00:02:47,010 --> 00:02:51,660
So searching through a length list if we're looking for a value let's say that we're looking to see

42
00:02:51,660 --> 00:02:54,000
if the list contains ninety nine.

43
00:02:54,120 --> 00:02:55,480
Worst case that's.

44
00:02:55,520 --> 00:02:55,850
Oh.

45
00:02:55,860 --> 00:03:00,300
And where and it's the length the list because it could be the very last thing or the second to last

46
00:03:00,300 --> 00:03:04,390
thing and we would need to start at the very beginning and check every single node.

47
00:03:04,400 --> 00:03:10,110
So as the list grows so does the amount of operations it takes to search for something and the same

48
00:03:10,110 --> 00:03:13,470
is true of accessing getting a certain node out.

49
00:03:13,470 --> 00:03:19,260
If we ask for the tenth node or the hundreds of the millionth node as that number grows as the list

50
00:03:19,260 --> 00:03:21,980
grows so does the number of operations there.

51
00:03:22,020 --> 00:03:28,110
When we compare that to an array an array has random access meaning that it's constant time to access

52
00:03:28,200 --> 00:03:32,740
items once they're indexed so the indexing takes time and insertions can take time.

53
00:03:33,030 --> 00:03:34,380
And so can removals.

54
00:03:34,590 --> 00:03:39,390
But other than that if you're just accessing if you're asking for the tenth or the fiftieth or the zero

55
00:03:39,390 --> 00:03:44,350
with item in an array it takes the same amount of time because of the way that arrays are structured.

56
00:03:44,370 --> 00:03:45,860
So arrays win that battle.

57
00:03:46,050 --> 00:03:52,460
So really to wrap it up singly linked lists excel at insertion and deletion compared to a race.

58
00:03:52,470 --> 00:03:56,940
So if that's something that you're really concerned about and you don't need random access you just

59
00:03:56,940 --> 00:04:02,910
need to have some data represented in a list with an order but you don't need to just access the 50th

60
00:04:02,910 --> 00:04:04,740
item or the millionth item.

61
00:04:04,740 --> 00:04:09,900
You just need to access it in order then a length list might be what you want if you're if you're concerned

62
00:04:09,900 --> 00:04:14,210
about insertion and removal times and you don't care so much about random access.

63
00:04:14,340 --> 00:04:14,740
OK.

64
00:04:14,970 --> 00:04:18,220
All right so let's go let's just recap a couple of things.

65
00:04:18,240 --> 00:04:20,830
So I think this single thing for us are excellent.

66
00:04:20,830 --> 00:04:22,240
Now this is just what I said.

67
00:04:22,350 --> 00:04:27,140
It's an alternative to arrays when insertion and deletion at the beginning are frequently required.

68
00:04:27,150 --> 00:04:31,170
Remember that inserting at the end of an array is not a big deal.

69
00:04:31,260 --> 00:04:33,370
We don't have to re-index anything.

70
00:04:33,840 --> 00:04:39,360
Arrays contain a built in index whereas length lists do not think those are just connections are nodes

71
00:04:39,360 --> 00:04:44,050
that are connected to one another with a dot next with a reference or a pointer.

72
00:04:44,070 --> 00:04:46,610
There is no number there's no index or position.

73
00:04:46,740 --> 00:04:49,990
We can't access things easily using an index.

74
00:04:49,990 --> 00:04:53,240
And the last point that I'll make if you're wondering why would you use this.

75
00:04:53,310 --> 00:04:58,170
Well remember this is a course on data structures and a lot of it is oriented sort of towards teaching

76
00:04:58,200 --> 00:04:59,210
theoretical things.

77
00:04:59,310 --> 00:05:03,370
But that doesn't mean that linguists never have uses or applications.

78
00:05:03,390 --> 00:05:05,180
Well we'll discuss more as we go.

79
00:05:05,190 --> 00:05:10,650
We're going to learn about some more specialized data structures that are built on top of linked lists

80
00:05:10,710 --> 00:05:15,570
like stacks and Qs which are coming up and so we have to understand how linked lists work in order to

81
00:05:15,570 --> 00:05:17,130
implement a stack in a queue.

82
00:05:17,190 --> 00:05:19,050
Congratulations if you made it to this point.

83
00:05:19,050 --> 00:05:20,860
I know this is a lot of content.

84
00:05:20,940 --> 00:05:25,770
It's a little different than some of my other courses that are focused on building something cool or

85
00:05:25,770 --> 00:05:30,040
fun or it's supposed to be fun at least this could be a bit dry.

86
00:05:30,060 --> 00:05:34,230
So I highly recommend take some time take a break do whatever you need to do.

87
00:05:34,230 --> 00:05:39,870
Get ice cream or go yell in a pillow and I'll see you in the next section.

88
00:05:39,960 --> 00:05:40,960
Doubly linked lists.

