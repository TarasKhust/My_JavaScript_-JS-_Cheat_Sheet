1
00:00:00,360 --> 00:00:01,170
Welcome back.

2
00:00:01,300 --> 00:00:04,860
So now moving on to breadth first traversal of a graph.

3
00:00:04,860 --> 00:00:11,280
So breadth first prioritises visiting all of the neighbors at a given depth before moving downwards

4
00:00:11,310 --> 00:00:13,480
or visiting neighbors of neighbors.

5
00:00:13,890 --> 00:00:17,560
So let's take a look at an example first with a tree.

6
00:00:17,560 --> 00:00:23,220
It's you know it's always easier to talk about because we can just say horizontal before vertical before

7
00:00:23,220 --> 00:00:29,340
descending down with a graph though it's a little more complicated but we can still talk about depth.

8
00:00:29,340 --> 00:00:33,430
There are layers there's levels it's actually called height.

9
00:00:33,480 --> 00:00:38,430
So if we look at if we start from zero there are three neighbors of zero.

10
00:00:38,490 --> 00:00:42,070
So we could call each one of them one two and nine.

11
00:00:42,210 --> 00:00:46,080
Each one of those have a height of 1 so we could put a little one next to them.

12
00:00:46,380 --> 00:00:52,180
Then if we go from one there are three neighbors of one 11 3 and 6.

13
00:00:52,440 --> 00:00:55,280
Those would have a height of 2.

14
00:00:55,470 --> 00:00:58,270
If we look at nine there's eight.

15
00:00:58,290 --> 00:01:07,140
And for those have a height of 2 They are two jumps away from 0 1 to something like 10 would have a

16
00:01:07,140 --> 00:01:08,870
height of three.

17
00:01:08,880 --> 00:01:15,720
So when I say height just imagine a little number here a 1 1 and a 1 and we have a 2 2 and a 2 and we're

18
00:01:15,720 --> 00:01:19,730
going to visit all of the things on the same height horizontally.

19
00:01:19,740 --> 00:01:24,510
In this case sort of diagonally across before we visit their neighbors.

20
00:01:24,510 --> 00:01:28,740
So here I'll play it for you again the order we go in.

21
00:01:28,860 --> 00:01:32,340
In this case it's going to be one to nine on this website.

22
00:01:32,340 --> 00:01:34,620
They use the lowest number first I believe.

23
00:01:34,620 --> 00:01:37,130
But we could also go 9 2 and then one.

24
00:01:37,140 --> 00:01:43,590
Either way we're prioritizing visiting neighbors all neighbors for a given node or vertex before visiting

25
00:01:43,740 --> 00:01:44,730
neighbors neighbors.

26
00:01:44,880 --> 00:01:47,090
OK here we go.

27
00:01:47,160 --> 00:01:49,460
You can see it actually draws those little numbers.

28
00:01:49,710 --> 00:01:54,800
And then for one we visit all of its children shouldn't children all of its neighbors.

29
00:01:54,990 --> 00:01:55,990
And we keep going.

30
00:01:56,280 --> 00:02:02,040
Now of course we have to keep track of what weve already visited because like Here I pause weve already

31
00:02:02,040 --> 00:02:05,810
visited five so we dont want to continually visited again

32
00:02:08,860 --> 00:02:10,280
we go almost there.

33
00:02:10,550 --> 00:02:11,110
OK.

34
00:02:11,520 --> 00:02:15,780
So the actual order that we go in doesnt matter that much.

35
00:02:15,840 --> 00:02:20,320
Like I said if were going to start 9 two and then 1 or 2 1 in the 9.

36
00:02:20,370 --> 00:02:25,070
Its just that we're flushing out the entire all of the neighbors were given Virtex first.

37
00:02:25,140 --> 00:02:30,050
So on our more simplified graph if we start from a we could go.

38
00:02:30,180 --> 00:02:33,130
And then B or we could go B and then e.

39
00:02:33,150 --> 00:02:36,320
And thats what I coded in Heres a B B.

40
00:02:36,720 --> 00:02:40,830
Then go back to B and visit all of its neighbors.

41
00:02:40,890 --> 00:02:42,130
So weve already done.

42
00:02:42,330 --> 00:02:50,000
So we have C and D then we go back to eat and visit all of its neighbors but weve already done a we've

43
00:02:50,010 --> 00:02:51,100
already done d.

44
00:02:51,180 --> 00:02:56,610
So it's only neighbor that's left is F and then from F we've already visited everything else and we're

45
00:02:56,610 --> 00:02:57,120
done.

46
00:02:57,390 --> 00:02:59,450
So in the next video I'll have the pseudo code.

