1
00:00:00,180 --> 00:00:04,530
All right let's get started implementing depth first traversal recursively.

2
00:00:04,530 --> 00:00:09,660
So first thing we need to do is to find a function that accepts a starting node.

3
00:00:09,690 --> 00:00:15,750
OK so here I have the same graph we've been working with has an adjacent to you list vertex adv. text

4
00:00:15,810 --> 00:00:21,030
add add remove edge Bob Bob down here is the code as shown in the last video if you want to set up the

5
00:00:21,030 --> 00:00:26,680
exact same graph it's me it looks like this although it's not perfect this tiger.

6
00:00:26,740 --> 00:00:28,790
Where do you have the nice slides.

7
00:00:28,800 --> 00:00:34,720
So what we want to do is come down here and just define this is going to be very long.

8
00:00:34,740 --> 00:00:41,070
You might just want to go with DFS are in DFS eye for recursive and intuitive but because this is my

9
00:00:41,070 --> 00:00:45,980
solution code I want people people to be able to find it and understand what it is very easily.

10
00:00:45,990 --> 00:00:55,140
So I prioritize legibility over like depth first recursive and it takes a vertex a start point.

11
00:00:55,200 --> 00:00:59,040
I actually like calling this start to make that clearer.

12
00:00:59,340 --> 00:00:59,700
OK.

13
00:00:59,730 --> 00:01:01,660
So that's the easy part.

14
00:01:01,900 --> 00:01:04,960
Now we have a couple of things we need to create a list to store the end result.

15
00:01:05,280 --> 00:01:08,710
We need to create an object to store the visited vertices.

16
00:01:08,960 --> 00:01:11,000
OK so let's do that.

17
00:01:11,170 --> 00:01:17,760
We come down here and start off by making my let's go with results.

18
00:01:17,760 --> 00:01:25,060
First an empty array and then we'll also do visited as an empty object.

19
00:01:25,230 --> 00:01:27,300
So next up we add to the meat of it.

20
00:01:27,330 --> 00:01:33,210
Create a helper function which accepts a vertex and help function should return early if the vertex

21
00:01:33,210 --> 00:01:34,110
is empty.

22
00:01:34,260 --> 00:01:35,570
Let's just start there.

23
00:01:35,910 --> 00:01:38,130
So let's define the helper function.

24
00:01:38,190 --> 00:01:46,710
I'm just going to call DFS DFS and it takes a vertex and then down at the bottom.

25
00:01:46,710 --> 00:01:52,050
I'm actually going to immediately invoke it with a start because that's the first time even though there's

26
00:01:52,050 --> 00:01:53,460
no logic yet the first time through.

27
00:01:53,460 --> 00:01:56,260
We want to start it off with a start.

28
00:01:56,340 --> 00:02:03,700
You could also you know you can define it this way function DFS blah blah and then call DFS manually

29
00:02:03,790 --> 00:02:05,290
and pass and start like that.

30
00:02:05,470 --> 00:02:06,870
But I prefer to do it this way.

31
00:02:07,110 --> 00:02:13,260
So function DFS Virtex and that vertex we need to check if it's empty.

32
00:02:13,260 --> 00:02:14,290
That's our base case.

33
00:02:14,310 --> 00:02:15,090
So we'll just do.

34
00:02:15,140 --> 00:02:19,690
If there's no vertex and remember that's when we hit the end of the line.

35
00:02:19,770 --> 00:02:22,610
If there's nothing to pass in to DFS.

36
00:02:22,950 --> 00:02:27,700
So if there's no vertex we'll just return.

37
00:02:28,080 --> 00:02:29,350
I'll just return.

38
00:02:29,870 --> 00:02:30,630
OK.

39
00:02:30,960 --> 00:02:31,980
It's just large enough.

40
00:02:32,130 --> 00:02:32,630
Hopefully.

41
00:02:32,730 --> 00:02:34,230
OK so here's a helper function.

42
00:02:34,260 --> 00:02:35,660
This will do the bulk of the work.

43
00:02:35,850 --> 00:02:40,820
Adding data into result and visited and then at the very end of this code will return result.

44
00:02:40,830 --> 00:02:41,690
When we're done.

45
00:02:42,060 --> 00:02:48,960
So let's start now with the real meat which is we need to do this logic the helper function should place

46
00:02:48,960 --> 00:02:54,530
the vertex except into the visited object and push that vertex into the result array.

47
00:02:55,020 --> 00:03:02,850
OK so in here we're going to add the vertex into results and add it into visited and set it equal to

48
00:03:02,850 --> 00:03:04,740
true is how I'm going to do it.

49
00:03:04,860 --> 00:03:12,870
So we'll do heads visited first visited of Virtex equals true that saying you know visited a is true

50
00:03:14,130 --> 00:03:18,750
and then also we're going to do a results up push Virtex.

51
00:03:18,990 --> 00:03:20,330
The order doesn't matter.

52
00:03:20,330 --> 00:03:21,160
So that's done.

53
00:03:21,240 --> 00:03:27,090
What's next loop over all of the values in the adjacency list for that vertex.

54
00:03:27,150 --> 00:03:31,230
If any of those values have not been visited recursively invoke the helper function.

55
00:03:31,260 --> 00:03:31,840
OK.

56
00:03:32,130 --> 00:03:38,850
Well I'll tell you right now there's a small problem we can write this sort of a simple way that you

57
00:03:38,850 --> 00:03:46,140
might think it should work this adjacency list referring to you know the graph it's adjacency list of

58
00:03:46,140 --> 00:03:52,360
Vertex so that should give us like if we did a it should give us an array B comma C..

59
00:03:52,650 --> 00:03:55,280
But let's just print that out let's to cancel the log.

60
00:03:55,290 --> 00:03:58,150
This adjacency list of vertex.

61
00:03:58,470 --> 00:03:58,810
OK.

62
00:03:58,830 --> 00:04:02,320
And I'm actually going to execute this code now and call it g.

63
00:04:02,880 --> 00:04:05,350
Depth first recursive pass in a.

64
00:04:05,460 --> 00:04:13,530
So we should just see that adjacency lists that array printed out but we don't we get this error cannot

65
00:04:13,530 --> 00:04:15,890
read Property adjacency list of undefined.

66
00:04:15,960 --> 00:04:19,060
Lovely problem with this in javascript.

67
00:04:19,080 --> 00:04:20,340
The key word this.

68
00:04:20,340 --> 00:04:26,520
So what I'm going to do to make this easier is appear to define our adjacency list to equal this dot

69
00:04:26,560 --> 00:04:32,040
adjacency list because in here our context the meaning of this has changed.

70
00:04:32,040 --> 00:04:35,470
So I'm going to preserve it up here and just call it adjacency list.

71
00:04:35,520 --> 00:04:37,260
Also it makes our code shorter.

72
00:04:37,260 --> 00:04:42,510
So now if I do adjacency list it knows when we say that we're referring to this data adjacency list

73
00:04:42,750 --> 00:04:46,880
where this refers to the actual graph itself.

74
00:04:47,100 --> 00:04:49,440
Rerun the code.

75
00:04:49,650 --> 00:04:51,370
Now we get B and C.

76
00:04:51,390 --> 00:04:52,050
Cool.

77
00:04:52,290 --> 00:04:52,820
OK.

78
00:04:53,040 --> 00:04:56,410
So now instead of printing them out we want to loop over it.

79
00:04:56,460 --> 00:05:05,290
So we're going to do a for each for each neighbor and call it naver a little fat arrow.

80
00:05:05,520 --> 00:05:09,310
We're going to check if that neighbor has already been visited.

81
00:05:09,660 --> 00:05:10,530
So how do we do that.

82
00:05:10,530 --> 00:05:14,750
Well we have this visited object which just passen neighbor.

83
00:05:14,850 --> 00:05:21,600
So that will be you know B and C for the first case if we're starting it and we want to do this if it's

84
00:05:21,600 --> 00:05:26,910
not been visited if it has been visited we can ignore it but if it's not been visited what are we going

85
00:05:26,910 --> 00:05:31,650
to do if it hasn't been visited recursively invoke the helper function with that vertex.

86
00:05:31,940 --> 00:05:32,460
OK.

87
00:05:32,550 --> 00:05:39,840
So if it's not been visited then we want to do return DFS neighbor OK.

88
00:05:40,200 --> 00:05:41,460
And we're basically done.

89
00:05:41,490 --> 00:05:43,200
We're missing one thing at the very end.

90
00:05:43,350 --> 00:05:48,640
I'm going to walk through this of course but we need to return the actual result array that we're building.

91
00:05:49,410 --> 00:05:55,980
OK so if this is first of all let's before I actually explain it let me just make sure I implemented

92
00:05:55,980 --> 00:05:56,750
it correctly.

93
00:05:56,760 --> 00:05:59,430
It's very easy to have a typo when you're talking.

94
00:05:59,910 --> 00:06:02,660
That's the moment of truth here.

95
00:06:03,490 --> 00:06:03,960
OK.

96
00:06:03,970 --> 00:06:06,240
So g dot adjacent No.

97
00:06:06,330 --> 00:06:06,890
What am I doing.

98
00:06:06,930 --> 00:06:10,320
G dot depth first recursive starting from a.

99
00:06:10,620 --> 00:06:11,800
Ok it's working.

100
00:06:11,970 --> 00:06:18,070
ECF I've done this one a couple times so I know the Serhiy daughter who made the slide to that order.

101
00:06:18,390 --> 00:06:21,020
But let's actually walk through what's happening on the call stack.

102
00:06:21,210 --> 00:06:24,230
So if you're good just to see that it works and you're done.

103
00:06:24,270 --> 00:06:27,540
Fair enough it's a bit difficult to step through.

104
00:06:27,540 --> 00:06:34,330
But let's actually open up the debugger and I'm going to call down here just copy this line.

105
00:06:34,530 --> 00:06:36,230
So we see what we're working with.

106
00:06:36,600 --> 00:06:37,740
And at a break point.

107
00:06:38,010 --> 00:06:38,380
OK.

108
00:06:38,400 --> 00:06:39,820
So execute the code.

109
00:06:40,080 --> 00:06:44,970
Scroll back up to the exciting area and I step through this.

110
00:06:45,000 --> 00:06:49,270
All right we get our first call in depth first recursive where start is equal to a.

111
00:06:50,400 --> 00:06:53,240
And we initialized some of our data.

112
00:06:53,760 --> 00:06:54,470
OK.

113
00:06:54,770 --> 00:06:59,680
Now then we get our first call DFS with start.

114
00:06:59,700 --> 00:07:01,220
So vertex is a.

115
00:07:01,710 --> 00:07:04,320
So if not vertex or Turnell that's not true.

116
00:07:04,350 --> 00:07:08,240
Right so we skip that line we set visited of a to be true.

117
00:07:08,400 --> 00:07:13,500
We push a result.

118
00:07:13,800 --> 00:07:15,990
So the result now contains a.

119
00:07:16,200 --> 00:07:20,090
So you can scroll down a has two neighbors B and C.

120
00:07:20,340 --> 00:07:23,230
So we're going with whatever's listed first which is B.

121
00:07:23,250 --> 00:07:24,590
That's the way that I constructed it.

122
00:07:24,600 --> 00:07:27,040
I added that connection before ABC.

123
00:07:27,300 --> 00:07:28,640
So we going to be first.

124
00:07:29,070 --> 00:07:30,640
So let's get to that part.

125
00:07:30,760 --> 00:07:37,710
Can see we get this anonymous function for the for each that's been added and we're going to check heavy

126
00:07:37,710 --> 00:07:39,980
visited neighbor one neighbor is B.

127
00:07:40,290 --> 00:07:40,980
We have not.

128
00:07:41,040 --> 00:07:46,460
So we return DFS of B and you'll see another DFS just a moment.

129
00:07:46,470 --> 00:07:47,210
Here we go.

130
00:07:47,220 --> 00:07:49,820
So we still have a couple of calls here on the stack.

131
00:07:49,860 --> 00:07:54,210
This is DFS of a nested inner function here.

132
00:07:54,240 --> 00:07:58,040
This is the for each which is waiting to also do for each of C..

133
00:07:58,340 --> 00:07:58,700
OK.

134
00:07:58,740 --> 00:08:01,570
So now we're at B and I'll speed this up a bit.

135
00:08:01,620 --> 00:08:02,510
We check.

136
00:08:02,510 --> 00:08:03,250
Is there vertex.

137
00:08:03,270 --> 00:08:04,440
Yes vertexes B.

138
00:08:04,500 --> 00:08:06,210
So that line is not true.

139
00:08:06,240 --> 00:08:10,470
We make sure to Markby is visited we push B and 2 result.

140
00:08:10,490 --> 00:08:13,190
So now result has a comma B.

141
00:08:13,240 --> 00:08:22,260
Now for each child and say child for a neighbor of B which means B really was only has one which is

142
00:08:22,260 --> 00:08:24,030
D and actually misspoke.

143
00:08:24,030 --> 00:08:25,300
There are two neighbors.

144
00:08:25,600 --> 00:08:27,280
There's a and D.

145
00:08:27,420 --> 00:08:28,810
But we've already visited a.

146
00:08:28,950 --> 00:08:31,690
So you can see we're checking if we visited neighbor.

147
00:08:31,710 --> 00:08:33,450
Well that's already been marked It's visited.

148
00:08:33,600 --> 00:08:35,130
So this does not happen.

149
00:08:35,130 --> 00:08:40,750
We don't return DFS of egg but we try again with neighbors set now.

150
00:08:41,130 --> 00:08:45,190
And this is true we have not visited Deitz So we've returned DFS offensive.

151
00:08:45,240 --> 00:08:47,160
And you'll see it added to the stack.

152
00:08:47,580 --> 00:08:48,240
There it is.

153
00:08:48,240 --> 00:08:52,570
This is defensive if the Virtex is not empty it's not falsie.

154
00:08:52,680 --> 00:08:59,760
So we keep going we ignore that visited vertexes troops and now we visited the push Dion and would go

155
00:08:59,760 --> 00:09:00,400
to its neighbors.

156
00:09:00,410 --> 00:09:06,730
Well what neighbors this does have it has B E and F C L C first time through.

157
00:09:06,870 --> 00:09:09,190
We're looking at B but we've already visited it.

158
00:09:09,210 --> 00:09:10,500
So we ignore.

159
00:09:10,710 --> 00:09:11,330
Now we're looking at.

160
00:09:11,350 --> 00:09:13,410
E which we haven't visited.

161
00:09:13,680 --> 00:09:21,270
So we had defensive e mulga this call stack is growing quite a bit defensive is up here and we check

162
00:09:21,870 --> 00:09:22,990
if not Virtex All right.

163
00:09:23,010 --> 00:09:26,250
There is a very Texas e so we market as visited.

164
00:09:26,280 --> 00:09:27,680
We push it on to result.

165
00:09:27,930 --> 00:09:30,040
Then we go to each of its neighbors.

166
00:09:30,180 --> 00:09:34,830
If you look at the adjacency list for e you can see c d n f.

167
00:09:34,830 --> 00:09:35,390
All right.

168
00:09:35,550 --> 00:09:36,620
So we're going to start with C..

169
00:09:36,630 --> 00:09:44,840
It's listed first and neighbors see we have not visited c so we returned DFS of C and it gets added

170
00:09:44,840 --> 00:09:45,500
on.

171
00:09:45,980 --> 00:09:46,830
Oh boy.

172
00:09:47,040 --> 00:09:48,720
Should've made a smaller graph.

173
00:09:48,720 --> 00:09:51,410
See Virtex is truth.

174
00:09:51,410 --> 00:09:53,650
So we skip this.

175
00:09:53,690 --> 00:09:54,500
We visit it.

176
00:09:54,500 --> 00:09:57,740
We said it to be true and visited results up push.

177
00:09:58,820 --> 00:10:01,030
Now for each of its neighbors.

178
00:10:01,150 --> 00:10:05,050
What neighbors to see HAVE IT HAS A and E.

179
00:10:05,300 --> 00:10:11,330
Well we've already visited day so we we don't do this we skip.

180
00:10:11,360 --> 00:10:13,800
We've already visited as well haven't we.

181
00:10:14,170 --> 00:10:15,130
OK.

182
00:10:16,040 --> 00:10:17,980
So what happens now.

183
00:10:17,990 --> 00:10:19,340
This is the real moment.

184
00:10:19,340 --> 00:10:21,310
Finally we've hit a dead end.

185
00:10:21,350 --> 00:10:21,920
Right.

186
00:10:21,920 --> 00:10:26,380
We go to see and we've been to a deep end.

187
00:10:26,820 --> 00:10:28,240
It's not what happens.

188
00:10:28,610 --> 00:10:30,310
Well watch the call stack over here.

189
00:10:31,140 --> 00:10:35,220
Something up hopped off there was that for each that was waiting.

190
00:10:35,220 --> 00:10:36,870
So that's done.

191
00:10:36,870 --> 00:10:43,640
Now we're back here where we have vertexes E and we're looking at its neighbors which we see.

192
00:10:44,400 --> 00:10:52,160
And now we're looking at its other neighbor which is D which we've already visited and now we're looking

193
00:10:52,160 --> 00:10:54,640
at its last neighbor ef which we have not visited.

194
00:10:54,680 --> 00:10:57,940
So we're going to add defensive effort to the call stack.

195
00:10:57,950 --> 00:10:59,630
There you go.

196
00:10:59,630 --> 00:11:04,880
Now we're looking at F and there is an f. we ate we visited it we added to the results.

197
00:11:05,120 --> 00:11:05,810
OK.

198
00:11:05,810 --> 00:11:08,280
Now we look at each of its neighbors.

199
00:11:08,340 --> 00:11:10,730
Is there anything that has not been visited at this point.

200
00:11:10,730 --> 00:11:12,410
We've seen everything.

201
00:11:12,530 --> 00:11:15,270
We visited everything on this entire graph.

202
00:11:15,320 --> 00:11:19,730
So all of them are marked visited which means we're not returning anything here.

203
00:11:20,000 --> 00:11:24,570
So we keep going and you'll see things get popped off eventually

204
00:11:29,480 --> 00:11:37,460
and finally we end up out of our main out of our inner helper function and we're returning a result

205
00:11:37,460 --> 00:11:39,820
at the very end which looks like this.

206
00:11:39,900 --> 00:11:44,580
And then it should just a moment almost there.

207
00:11:44,620 --> 00:11:45,400
There you go.

208
00:11:45,560 --> 00:11:47,190
ABDC f.

209
00:11:47,420 --> 00:11:47,960
OK.

210
00:11:48,380 --> 00:11:50,050
So there's a lot to walk through.

211
00:11:50,050 --> 00:11:54,650
I totally understand if you didn't make it through that I barely survived.

212
00:11:54,710 --> 00:12:00,590
So the recursion can be a little difficult to follow but so just think of it as visit a node and visit

213
00:12:00,590 --> 00:12:04,650
one neighbor and then revisit one of its neighbors and visit one of its neighbors.

214
00:12:04,660 --> 00:12:05,560
Anyway it's a lot.

215
00:12:05,580 --> 00:12:06,710
Totally understand.

216
00:12:06,710 --> 00:12:11,810
I hope though that it at least makes a little bit of sense how it works how the recursion works.

217
00:12:11,810 --> 00:12:14,280
Remember I had to do this adjacency list.

218
00:12:14,300 --> 00:12:15,940
This is the one gotcha.

219
00:12:15,950 --> 00:12:19,940
Because the context the meaning of this change in our inner function.

220
00:12:19,940 --> 00:12:24,530
So to preserve it appear also shortens our code just a tiny bit.

221
00:12:24,620 --> 00:12:28,380
I expect there to be a healthy amount of questions on this one.

222
00:12:28,400 --> 00:12:32,210
This is a bit tricky but I think it might also help in the next video.

223
00:12:32,220 --> 00:12:34,430
I'm going to do the same thing iterative.

224
00:12:34,610 --> 00:12:36,790
So actually the order will be slightly different.

225
00:12:36,860 --> 00:12:38,090
It will still be depth first.

226
00:12:38,090 --> 00:12:43,940
There's not just one depth first order but the actual result that we get will look a little bit different

227
00:12:43,940 --> 00:12:45,080
and you'll see why in just a bit.

