1
00:00:00,270 --> 00:00:00,840
All right.

2
00:00:00,840 --> 00:00:03,710
So here's the pseudo code to implement breadth first search.

3
00:00:03,720 --> 00:00:09,450
It's very similar to what we did for depth first search except we actually use a different data structure

4
00:00:09,780 --> 00:00:11,150
rather than using a stack.

5
00:00:11,190 --> 00:00:17,100
We use a Q but I'm just going to use an array which we did for the stack but we just used different

6
00:00:17,100 --> 00:00:23,910
methods rather than push and pop we'll use push and then shift so that we are adding to the end.

7
00:00:23,910 --> 00:00:29,220
But we're moving from the beginning so that the first thing is also the first thing out unlike what

8
00:00:29,220 --> 00:00:33,790
we had with the depth first version where the first thing had to wait until the very very end.

9
00:00:34,030 --> 00:00:41,820
OK so your function except to start we'll just do a create a Q Just use an array and make a variable

10
00:00:41,820 --> 00:00:44,700
called Q and place the starting vertex in it.

11
00:00:44,700 --> 00:00:46,140
So there's something to start.

12
00:00:46,530 --> 00:00:47,990
Then just like before.

13
00:00:48,120 --> 00:00:50,600
Create our result array to store.

14
00:00:50,600 --> 00:00:53,430
You know what we return to the end with our order.

15
00:00:53,540 --> 00:00:59,370
Make an object to store the visited nodes like we've been doing just call it visited and then mark the

16
00:00:59,370 --> 00:01:03,120
starting vertex as visited then the bulk for logic.

17
00:01:03,300 --> 00:01:04,880
As long as there's anything in the queue.

18
00:01:04,920 --> 00:01:11,430
So while loop while there's something in there we're going to shift the first vertex from the queue

19
00:01:11,820 --> 00:01:16,580
and push it on to the array that stores what we visited that stores our result.

20
00:01:16,650 --> 00:01:19,950
So take the first item out and push it to the result.

21
00:01:20,280 --> 00:01:26,550
And then for each neighbor in that Virtex all of its neighbors and the adjacency list if we haven't

22
00:01:26,550 --> 00:01:29,120
visited yet mark it as visited.

23
00:01:29,280 --> 00:01:32,640
And then add it to that queue push it into the end.

24
00:01:32,990 --> 00:01:33,590
OK.

25
00:01:33,870 --> 00:01:34,760
So we have our queue.

26
00:01:34,860 --> 00:01:36,370
It's the exact same process.

27
00:01:36,540 --> 00:01:40,300
Well almost the same process as depth first search or depth first traversal.

28
00:01:40,300 --> 00:01:43,550
The iterative version but we're using a q instead of a stack.

29
00:01:43,590 --> 00:01:47,000
So we're still pushing to the end but we're now shifting from the beginning.

30
00:01:47,040 --> 00:01:48,910
Otherwise it's pretty much the same.

31
00:01:48,990 --> 00:01:50,180
I'm going to write the code again.

32
00:01:50,200 --> 00:01:50,870
The next video.

33
00:01:50,880 --> 00:01:55,380
But you could just take your code if you wrote it or take my solution and just slightly tweak it.

34
00:01:55,590 --> 00:01:59,720
And at the very end we do need to return the array of all the nodes we visited.

35
00:01:59,920 --> 00:02:00,460
OK.

36
00:02:00,720 --> 00:02:05,180
So make this queue to store everything put the first node in there where we're starting out.

37
00:02:05,340 --> 00:02:10,950
And then while there's something in that queue we're going to remove the first item we're going to add

38
00:02:10,950 --> 00:02:14,470
it to our result then we're going to look at each of its neighbors.

39
00:02:14,550 --> 00:02:19,650
And if they're not visited yet they're not marked as visited Mark that Mr. visited and then pushed them

40
00:02:19,650 --> 00:02:23,360
to the queue and keep going and then return the entire result.

41
00:02:23,360 --> 00:02:24,280
At the very end.

42
00:02:24,500 --> 00:02:24,950
OK.

43
00:02:25,140 --> 00:02:26,760
So let's do that in the next video.

