1
00:00:00,240 --> 00:00:01,010
Welcome back.

2
00:00:01,080 --> 00:00:03,450
So we're going to implement the iterative solution now.

3
00:00:03,720 --> 00:00:08,020
And the first thing I need to do of course is define the function itself.

4
00:00:08,340 --> 00:00:18,080
So what I call this depth first recursive depth first iterative you could definitely do something simpler.

5
00:00:18,420 --> 00:00:18,880
OK.

6
00:00:19,080 --> 00:00:23,940
So it accepts a starting node and there's a couple things you have to get out of the way if we have

7
00:00:23,940 --> 00:00:24,900
to make our stack.

8
00:00:25,020 --> 00:00:32,280
We have to make our result right and our visited list or not a list object so visited we could actually

9
00:00:32,280 --> 00:00:35,640
just copy this from a pure result and visited.

10
00:00:36,660 --> 00:00:38,600
But I also need to make my stack.

11
00:00:38,770 --> 00:00:46,170
I said this stack is going to be let's call a stack an array as well but we need to put the start in

12
00:00:46,170 --> 00:00:46,600
there.

13
00:00:46,620 --> 00:00:51,300
Remember this line here at the starting vertex to the stack and market visited well and was going to

14
00:00:51,300 --> 00:00:55,770
do this rather than pushing it just have it initialized there.

15
00:00:55,770 --> 00:00:58,230
Then after that we need to market as visited.

16
00:00:58,260 --> 00:01:03,010
Let's just make sure we did everything else made the function I made the stack create a list at the

17
00:01:03,020 --> 00:01:03,280
out.

18
00:01:03,290 --> 00:01:03,800
Yeah.

19
00:01:03,930 --> 00:01:04,670
This is all good.

20
00:01:04,770 --> 00:01:10,240
We need to add the starting vortex we did that marketing's visited and then we'll add our loop.

21
00:01:10,380 --> 00:01:16,260
So I'm going into sets visited make this just a separate line just so we can see these are our variables

22
00:01:16,880 --> 00:01:21,600
our declarations visited of start equals true.

23
00:01:21,870 --> 00:01:26,040
Again you could just use an array to to manage what's been visited and closed this.

24
00:01:26,040 --> 00:01:30,640
By the way but I like doing it this way with an object it's just more explicit.

25
00:01:30,900 --> 00:01:31,460
OK.

26
00:01:31,710 --> 00:01:33,090
Now we need to do our Wildblue.

27
00:01:33,180 --> 00:01:37,380
So while there's something in our stack so I'm just going to do while stack length.

28
00:01:37,470 --> 00:01:42,720
You could do greater than zero but stacked at length that's easy because soon as we hit zero we're done

29
00:01:42,990 --> 00:01:44,320
it will be false.

30
00:01:44,700 --> 00:01:50,430
While the stack has something in it pop the next vertex from the stack if that vertex hasn't been visited

31
00:01:50,430 --> 00:01:52,820
yet marked as visited.

32
00:01:52,950 --> 00:01:54,670
So let's start with that.

33
00:01:54,780 --> 00:02:00,840
I'm going to make a variable first to store what we're popping off so I'm just going to call it I don't

34
00:02:00,840 --> 00:02:05,990
know current vertex equals stacked up top just like that.

35
00:02:06,090 --> 00:02:10,360
Then we need to actually add current vertex to our result array.

36
00:02:10,370 --> 00:02:13,140
So a result of push current vertex.

37
00:02:13,170 --> 00:02:15,410
So that's what we'll return at the very end.

38
00:02:15,990 --> 00:02:19,190
And then we're going to go to each of its neighbors.

39
00:02:19,740 --> 00:02:25,200
And before I do that rather than redefining current vertex each time through in this loop I'm going

40
00:02:25,200 --> 00:02:30,470
to come up here just to let current vertex and then down here give it a value.

41
00:02:30,840 --> 00:02:37,380
Minor thing but I just don't like you know constantly re initializing current vertex inside a loop.

42
00:02:37,380 --> 00:02:41,350
Now we need to add each of its neighbors to the stack.

43
00:02:41,440 --> 00:02:47,730
Well if they haven't been visited yet and let's just start by accessing the neighbors so this dot adjacency

44
00:02:47,730 --> 00:02:50,030
list of current vertex.

45
00:02:50,190 --> 00:02:56,410
So that's going to give us if we're talking about a it would give us an array that contains B and C..

46
00:02:57,110 --> 00:02:57,460
OK.

47
00:02:57,480 --> 00:03:02,780
So this started Jason's the list current vertex data for each kind of a long line.

48
00:03:02,970 --> 00:03:05,430
I'm going to call it neighbor could call it.

49
00:03:05,430 --> 00:03:07,850
I don't know connection now.

50
00:03:08,670 --> 00:03:09,690
I wouldn't call it pal.

51
00:03:09,690 --> 00:03:10,590
Probably not.

52
00:03:10,590 --> 00:03:11,710
So what do we do.

53
00:03:12,000 --> 00:03:15,160
Well if it has not been visited.

54
00:03:15,330 --> 00:03:18,930
So if inside a visited there is nothing for neighbor.

55
00:03:19,260 --> 00:03:26,280
If that's the case we need to make sure that it has been visited.

56
00:03:26,510 --> 00:03:35,960
OK so we're going to visit the neighbor and then we'll set it to be visited then stack push naver just

57
00:03:35,960 --> 00:03:36,790
like that.

58
00:03:37,250 --> 00:03:37,890
OK.

59
00:03:38,180 --> 00:03:40,030
And we're basically done.

60
00:03:40,130 --> 00:03:45,330
We just have to at the very end return our correct results.

61
00:03:46,370 --> 00:03:53,930
And as we're going through this how about right here because the log of the stack so we can see what

62
00:03:53,930 --> 00:03:54,960
we're working with.

63
00:03:55,270 --> 00:03:55,960
OK.

64
00:03:56,720 --> 00:04:00,250
So to execute our code and so called G.

65
00:04:00,470 --> 00:04:02,740
Depth first iterative with a.

66
00:04:03,380 --> 00:04:05,140
And what do we get.

67
00:04:05,150 --> 00:04:06,770
I can make this larger.

68
00:04:07,270 --> 00:04:07,860
OK.

69
00:04:08,090 --> 00:04:10,980
So first of all the order we get is different.

70
00:04:11,090 --> 00:04:14,710
And we can talk about wind just a bit but it still is depth first.

71
00:04:14,780 --> 00:04:17,950
If you don't remember let me do the same thing for recursive.

72
00:04:18,170 --> 00:04:19,340
We got a B.

73
00:04:19,400 --> 00:04:20,660
ECF.

74
00:04:20,660 --> 00:04:27,760
So the recursive version was a B D E C F which is still depth first.

75
00:04:27,890 --> 00:04:34,790
The iterative version instead of going a and then B we actually end up going a and then C but as long

76
00:04:34,790 --> 00:04:39,650
as we're following this path down and following one of C's neighbors and its neighbors and its neighbors

77
00:04:39,810 --> 00:04:41,240
it's still depth first.

78
00:04:41,240 --> 00:04:45,850
It's just we started with C rather than B because of the way that our code works and you'll see why.

79
00:04:46,010 --> 00:04:49,250
So a see where we go to see Neighbors.

80
00:04:49,250 --> 00:04:50,090
We've already been to a.

81
00:04:50,110 --> 00:04:54,140
So if we go to eat then from it we have three choices.

82
00:04:54,140 --> 00:04:55,180
We've already been to see.

83
00:04:55,250 --> 00:05:01,100
So we have D or we have F and our code goes to F next and then f we can go to E.

84
00:05:01,130 --> 00:05:01,910
We've already been there.

85
00:05:01,910 --> 00:05:03,200
So we go to D.

86
00:05:03,390 --> 00:05:06,090
And then from D E F or B.

87
00:05:06,140 --> 00:05:06,980
Well we've already done this.

88
00:05:06,980 --> 00:05:07,780
We've done this.

89
00:05:07,880 --> 00:05:13,960
So if we go to B but it still is depth first we go here here here here here here.

90
00:05:14,120 --> 00:05:15,140
So think of it this way.

91
00:05:15,170 --> 00:05:16,760
This is our adjacency list.

92
00:05:16,760 --> 00:05:18,760
It's the same for both versions.

93
00:05:19,040 --> 00:05:22,130
What we are doing in the recursive version we started that way.

94
00:05:22,460 --> 00:05:28,340
We go to be alphabetically first or whatever is first in this adjacency list is visited first.

95
00:05:28,340 --> 00:05:37,840
So a to b versus in the iterative version we went to a to c and then from C we look at c we go to E

96
00:05:38,090 --> 00:05:39,360
and from E.

97
00:05:39,560 --> 00:05:42,080
You've already been to C and we go to F..

98
00:05:42,080 --> 00:05:46,320
We're taking whatever is at the end where we're working from this direction.

99
00:05:46,400 --> 00:05:51,040
If that makes sense from the end of the adjacency list rather than from the beginning.

100
00:05:51,290 --> 00:05:53,450
So now let's walk through why this works.

101
00:05:53,450 --> 00:05:57,830
Let me clear this and let's do iterative a.

102
00:05:57,890 --> 00:05:59,420
This is what our stack looks like.

103
00:05:59,450 --> 00:06:01,280
The very first time through we have a.

104
00:06:01,640 --> 00:06:02,130
OK.

105
00:06:02,390 --> 00:06:09,200
So we visit a bit go up through our code a bit more we're going to visit it add it to the result.

106
00:06:09,200 --> 00:06:15,740
So our result now contains a then for each neighbor where we have to b and c we add them both and we

107
00:06:15,740 --> 00:06:17,420
popped off and became empty.

108
00:06:17,510 --> 00:06:19,520
And we add B and C.

109
00:06:19,910 --> 00:06:25,100
So then what we're going to do is visit C because we are popping off the end.

110
00:06:25,130 --> 00:06:26,930
So we're going to see next.

111
00:06:27,230 --> 00:06:29,680
And then we're going to add it to the result.

112
00:06:29,780 --> 00:06:35,180
So our result looks like a C and then we go to C's neighbors and we push those in.

113
00:06:35,240 --> 00:06:39,890
So we end up with B and B because we've already visited a we don't add it in.

114
00:06:40,250 --> 00:06:43,350
So the next we pop off the stack we go to E.

115
00:06:43,730 --> 00:06:46,010
So we visit e a c.

116
00:06:46,070 --> 00:06:46,610
OK.

117
00:06:46,730 --> 00:06:49,590
So you can see that B is just patiently waiting here.

118
00:06:49,790 --> 00:06:56,270
This if we are doing breadth first we would go immediately a to c and then back to B but its depth first.

119
00:06:56,270 --> 00:06:57,860
So poor b is waiting.

120
00:06:58,040 --> 00:07:03,470
Or in the recursive version we go a to b and then C is waiting anyway.

121
00:07:03,590 --> 00:07:10,850
So we keep going and you can see that we end up with is children or neighbors F and D are both added

122
00:07:10,850 --> 00:07:13,800
in and D is first and then F..

123
00:07:13,820 --> 00:07:15,610
But we pop off the end.

124
00:07:15,650 --> 00:07:20,600
So then we visit f next and then from f we don't have anything to add because we've already been to

125
00:07:20,600 --> 00:07:22,120
E and to D.

126
00:07:22,370 --> 00:07:28,100
Well we haven't been to D but we've already added it into our stack and we've already visited it meaning

127
00:07:28,280 --> 00:07:30,760
we've said it to be visited true.

128
00:07:31,030 --> 00:07:33,480
Otherwise you would get pushed in there again.

129
00:07:33,890 --> 00:07:35,690
OK so then we pop f off.

130
00:07:35,720 --> 00:07:36,770
Now we have B and D.

131
00:07:36,920 --> 00:07:37,860
We start with D.

132
00:07:37,880 --> 00:07:42,630
Pop off the end and then finally we get to be it's the last thing added.

133
00:07:43,040 --> 00:07:49,040
So we're using a stack an array to keep track of sort of where we need to go back to.

134
00:07:49,100 --> 00:07:49,670
Right.

135
00:07:49,670 --> 00:07:56,670
We're going here we know we need to visit B at some point but we start with C and then from C we go

136
00:07:56,690 --> 00:07:59,430
to eat and at B we're going to go to f.

137
00:07:59,450 --> 00:08:01,440
But we also need to remember to go to D.

138
00:08:01,550 --> 00:08:05,230
So we add D in as well but poor b has been waiting this whole time.

139
00:08:05,240 --> 00:08:06,650
It's depth first.

140
00:08:07,040 --> 00:08:12,990
So I do think for some people the well I think the iterative version is easier to understand but I think

141
00:08:12,990 --> 00:08:17,570
that the recursive version is important to understand why it works.

142
00:08:17,570 --> 00:08:21,030
It's a classic use case for recursion graft versal that is.

143
00:08:21,260 --> 00:08:26,810
And I think if you can get one of these if you can understand walk through it you're good.

144
00:08:27,140 --> 00:08:28,470
So this is the iterative version.

145
00:08:28,490 --> 00:08:30,140
We saw the recursive version.

146
00:08:30,140 --> 00:08:31,360
They both are depth first.

147
00:08:31,370 --> 00:08:33,170
We do get a slightly different order.

148
00:08:33,200 --> 00:08:37,430
There's not one exact precise depth first order for any given graph.

149
00:08:37,550 --> 00:08:40,430
So there are different orders but they are depth first.

150
00:08:40,430 --> 00:08:40,920
OK.

151
00:08:41,090 --> 00:08:43,040
Next up breadth first.

152
00:08:43,040 --> 00:08:44,240
We're all missing one solution.

