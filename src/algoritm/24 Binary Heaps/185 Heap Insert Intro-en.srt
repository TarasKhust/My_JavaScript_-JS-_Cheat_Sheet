1
00:00:00,300 --> 00:00:01,270
All right welcome back.

2
00:00:01,320 --> 00:00:04,910
So here is our base structure for our max binary heap class.

3
00:00:04,920 --> 00:00:06,060
It's very simple.

4
00:00:06,060 --> 00:00:08,460
We are implementing only a max binary heap.

5
00:00:08,580 --> 00:00:13,980
But to change it over to a binary heap or to make a man heap is very simple once you know how to do

6
00:00:14,070 --> 00:00:14,700
Max.

7
00:00:14,730 --> 00:00:16,090
So either one could have for it.

8
00:00:16,110 --> 00:00:23,280
So we defined the class Max binary heap and the only property it needs in the constructor is a values

9
00:00:23,310 --> 00:00:23,870
property.

10
00:00:24,030 --> 00:00:28,170
So values will start as an empty list or an empty array and that's it.

11
00:00:28,260 --> 00:00:31,620
We don't need to make a node class like we did for our other tree.

12
00:00:31,740 --> 00:00:34,260
We don't need to make a note class like we did for length lists.

13
00:00:34,260 --> 00:00:37,350
We don't need previous pointers or next or left or right.

14
00:00:37,410 --> 00:00:40,210
All we need is an empty array to start.

15
00:00:40,290 --> 00:00:45,540
And in this video we're going to walk through how we would add an insert method so that we could say

16
00:00:45,630 --> 00:00:53,130
Max Bryner insert 10 max Bryner insert 50 and we'll just be storing things in this values array just

17
00:00:53,130 --> 00:00:59,000
like I showed you here where we can take instead of having to create a bunch of nodes connect them manually.

18
00:00:59,160 --> 00:01:05,250
We store them in an array and we use their position to model the actual structure the position their

19
00:01:05,270 --> 00:01:11,880
index the individual numbers corresponding to each item's position is what actually gives that the structure

20
00:01:11,880 --> 00:01:13,120
of the heap.

21
00:01:13,200 --> 00:01:15,540
So we'll move things around and swap them.

22
00:01:15,540 --> 00:01:20,280
So to make something something is parent it just goes to the correct index.

23
00:01:20,280 --> 00:01:21,520
So we'll come back to that.

24
00:01:21,630 --> 00:01:25,140
But that's all that we need to store is an array of values.

25
00:01:25,530 --> 00:01:25,980
OK.

26
00:01:26,250 --> 00:01:32,070
So as far as the process to insert something into emacs binary heap it's a little bit more complicated

27
00:01:32,070 --> 00:01:38,820
than a binary search tree but it's still I mean I think it's relatively straightforward but it makes

28
00:01:38,820 --> 00:01:41,000
sense if you think about it it's logical.

29
00:01:41,130 --> 00:01:42,050
So what would you do.

30
00:01:42,120 --> 00:01:43,900
We fill it out from left to right.

31
00:01:43,950 --> 00:01:49,560
So all that honestly means if we have an array like we have here if we were trying to insert something

32
00:01:49,560 --> 00:01:52,740
to the tree the only place for it to go is at the end.

33
00:01:52,890 --> 00:01:55,310
So we just push on to our list.

34
00:01:55,440 --> 00:02:00,000
We just do you know array or list up push the new value whatever it is.

35
00:02:00,000 --> 00:02:05,070
Now of course it's most likely not going to be in the right in the right spot right off the bat.

36
00:02:05,070 --> 00:02:07,220
Let's say we push in 500.

37
00:02:07,240 --> 00:02:09,660
Well that is the largest value in here.

38
00:02:09,910 --> 00:02:12,770
Five hundred is going to need to work all the way up to the top.

39
00:02:12,810 --> 00:02:16,990
So we added to the end and then we do something called bubbling up.

40
00:02:17,040 --> 00:02:23,460
And what that means is basically we swap it until it finds its final correct resting place in a max

41
00:02:23,460 --> 00:02:28,190
binary heap the larger values are going to bubble up to the correct spot.

42
00:02:28,200 --> 00:02:34,450
So what that looks like if we were to step through it if we add 55 to the end of the list to our array.

43
00:02:34,590 --> 00:02:36,990
This is what we're actually storing in our class.

44
00:02:36,990 --> 00:02:39,930
This is just a nice visualization but this is what stored.

45
00:02:40,070 --> 00:02:41,580
Fifty five goes to the end.

46
00:02:41,610 --> 00:02:43,850
That's not the right spot but we just put it there to start.

47
00:02:44,160 --> 00:02:50,840
And that means by putting it here it's index means it is a child of 33.

48
00:02:51,120 --> 00:02:53,660
So this is index of two right here.

49
00:02:53,820 --> 00:02:59,580
So its children are at index 5 and 6 2 times 2 plus 1 2 times 2 plus 2 right.

50
00:02:59,610 --> 00:03:03,570
So this is 0 1 2 3 4 5 and 6.

51
00:03:03,660 --> 00:03:05,740
Those are the two children as we can see here.

52
00:03:06,000 --> 00:03:07,880
It's all set up correctly.

53
00:03:08,080 --> 00:03:10,250
Okay so next we bubble up.

54
00:03:10,530 --> 00:03:14,860
And what that means is we take this node and we compare it to its parent.

55
00:03:15,270 --> 00:03:22,150
So we compare 55 to 33 and we swap them because 55 is larger.

56
00:03:22,180 --> 00:03:27,330
Theres a little swap not quite an animation but you can see it there and the change is reflected here.

57
00:03:27,330 --> 00:03:34,530
So before we had 55 as the child of 33 that was not the correct place we just put it in without caring.

58
00:03:34,530 --> 00:03:39,350
Then we compared it to the parent and we swap.

59
00:03:39,870 --> 00:03:41,680
Then we compare it to the parent again.

60
00:03:41,970 --> 00:03:43,900
How about 41 and 55.

61
00:03:44,220 --> 00:03:45,280
Well we swap them.

62
00:03:45,480 --> 00:03:52,320
So now our data structure looks like this where we have 55 as the root and its two children are 39 and

63
00:03:52,320 --> 00:03:53,130
41.

64
00:03:53,430 --> 00:03:54,260
All is good.

65
00:03:54,270 --> 00:04:00,630
Everyone is happy in the world of our max binary heap because now every node satisfies the property

66
00:04:00,630 --> 00:04:04,860
that its two children must be less than the node itself.

67
00:04:04,860 --> 00:04:08,370
So again we insert and then we bubble up by swapping.

68
00:04:08,520 --> 00:04:10,030
And this is why its important.

69
00:04:10,200 --> 00:04:13,520
When I talked about how you could find a parent based off of a child.

70
00:04:13,860 --> 00:04:19,830
So if we had like we had here fifty five we added to the end we need to find it to parent at 33 and

71
00:04:19,830 --> 00:04:20,620
compare them.

72
00:04:20,790 --> 00:04:29,030
Then we swapped them then we need to find 55 new parent 41 and compare them and we swap them so here's

73
00:04:29,030 --> 00:04:31,740
an animated version on visual.

74
00:04:31,760 --> 00:04:34,380
I'll go figure out a visual.

75
00:04:34,550 --> 00:04:41,000
Whatever it is they give you numbers here so you can see the actual order in the array in the list.

76
00:04:41,000 --> 00:04:42,770
That's underlying it.

77
00:04:42,800 --> 00:04:45,230
So you would read it you know left to right.

78
00:04:45,230 --> 00:04:47,670
This is the first item and second third and so on.

79
00:04:47,870 --> 00:04:58,250
So if we were to insert a value let's say 26 is not going to be exciting let's do about one hundred.

80
00:04:58,640 --> 00:05:00,110
Insert that.

81
00:05:00,290 --> 00:05:05,480
The very first thing we do is add it to the left it the way we added it always goes to fill with the

82
00:05:05,480 --> 00:05:06,970
left first and then the right.

83
00:05:07,070 --> 00:05:08,800
And that's I mean we're using an array.

84
00:05:08,870 --> 00:05:14,250
So just by adding it to the end of the array by pushing onto it it's going to be added here automatically.

85
00:05:14,780 --> 00:05:15,260
OK.

86
00:05:15,650 --> 00:05:20,960
So we start here and then we're going to compare it to its parent 144.

87
00:05:21,050 --> 00:05:23,100
This is a max binary heap.

88
00:05:23,150 --> 00:05:30,530
So we are going to swap them and now we take 100 and compare it to its new parent which is 70.

89
00:05:30,730 --> 00:05:32,060
Well 100 is still larger.

90
00:05:32,060 --> 00:05:33,700
So we're going to swap them.

91
00:05:34,130 --> 00:05:36,470
And now we take 100 and we compare it to 99.

92
00:05:36,470 --> 00:05:37,260
It's larger.

93
00:05:37,310 --> 00:05:39,190
So we swap them again.

94
00:05:39,650 --> 00:05:40,600
And now we're done.

95
00:05:41,090 --> 00:05:43,230
And this is our new max primary heap.

96
00:05:43,370 --> 00:05:50,720
If we entered another value here like 15 it's going to go right there and that's where it stays at least

97
00:05:50,720 --> 00:05:51,910
for now.

98
00:05:52,010 --> 00:05:58,380
If we were to insert another one it goes to the left and it stays there looks to a larger value.

99
00:05:58,520 --> 00:05:58,790
Sure.

100
00:05:58,790 --> 00:06:00,920
Fifty eight we insert to the right.

101
00:06:01,040 --> 00:06:01,940
We swap.

102
00:06:01,940 --> 00:06:03,500
Now we're done.

103
00:06:03,530 --> 00:06:07,590
So again there is no order between the left and right siblings.

104
00:06:07,590 --> 00:06:13,500
There's no shared property other than that they are less than their shared parent in a max binary heap.

105
00:06:13,790 --> 00:06:14,330
OK.

106
00:06:14,510 --> 00:06:15,920
So the pseudocode to do this.

107
00:06:16,040 --> 00:06:17,430
Here's the simple version.

108
00:06:17,600 --> 00:06:19,060
You just write a method called the insert.

109
00:06:19,070 --> 00:06:20,500
It accepts a value.

110
00:06:20,600 --> 00:06:23,270
We're not working with nodes or anything it just accepts a number.

111
00:06:23,450 --> 00:06:24,390
Insert 10.

112
00:06:24,560 --> 00:06:27,310
You add 10 to the end of the values array.

113
00:06:27,380 --> 00:06:32,460
You just push 10 into values and then you bubble it up to its correct spot.

114
00:06:32,840 --> 00:06:36,250
So that's that's the more complicated part it's easy to add it to the end of the tree.

115
00:06:36,260 --> 00:06:39,670
Super easy or the end of the heap to get it to go to the right spot.

116
00:06:39,670 --> 00:06:40,700
So little more work.

117
00:06:40,710 --> 00:06:42,490
So here some more detailed pseudocode.

118
00:06:42,830 --> 00:06:45,560
If you would like to do this all in one method called insert.

119
00:06:45,560 --> 00:06:46,550
You can do that.

120
00:06:46,550 --> 00:06:51,620
You could also write a method called insert which calls another method called bubble up totally up to

121
00:06:51,620 --> 00:06:52,230
you.

122
00:06:52,620 --> 00:06:54,050
But the way bubble up will work.

123
00:06:54,170 --> 00:06:58,260
Once you push the value in to the end of the values the list or the array.

124
00:06:58,340 --> 00:07:00,950
It's at the very end and it's probably in the wrong spot.

125
00:07:00,950 --> 00:07:03,510
It could be in the right spot but it's most likely in the wrong place.

126
00:07:03,630 --> 00:07:08,900
So here are the basic steps you're going to take the item at the last index the end of the array.

127
00:07:08,960 --> 00:07:13,580
The very last thing you added and then you're going to find its parent.

128
00:07:13,580 --> 00:07:19,320
Remember the math that we should that I showed you index minus one divided by two and you floor that.

129
00:07:19,370 --> 00:07:24,560
So that gives you the index of the parent and then you just compare the value at that index compared

130
00:07:24,560 --> 00:07:27,720
to the value that you just added to the end of the array.

131
00:07:28,460 --> 00:07:30,170
And then you see which one is larger.

132
00:07:30,170 --> 00:07:31,800
It's a max binary heap.

133
00:07:31,910 --> 00:07:36,200
If the one at the end we inserted is larger we swap the values.

134
00:07:36,200 --> 00:07:38,440
If it's not then stop you're done.

135
00:07:38,450 --> 00:07:44,630
It's in the right spot and you keep repeating that process as long as the values element at the parent

136
00:07:44,630 --> 00:07:50,480
index is less than the values element at the child index or the other way around as long as the child

137
00:07:50,510 --> 00:07:51,740
is larger than the parent.

138
00:07:51,770 --> 00:07:52,610
Keep swapping.

139
00:07:52,610 --> 00:07:57,890
So you'll swap and then you'll reset the index to now be the parent index.

140
00:07:57,890 --> 00:07:58,760
So you moving in.

141
00:07:58,820 --> 00:07:59,080
Right.

142
00:07:59,080 --> 00:08:04,560
So if we went back to this example the very beginning we add 55 to the end.

143
00:08:04,770 --> 00:08:08,850
We find its parent let's just look down here so we add 55 to the end.

144
00:08:08,910 --> 00:08:15,020
We find it's parent based off of the index we subtract one we divide by two index.

145
00:08:15,060 --> 00:08:17,600
Is this item at the value is 33.

146
00:08:17,600 --> 00:08:19,990
Index is to compare.

147
00:08:20,060 --> 00:08:21,380
Fifty five is larger.

148
00:08:21,380 --> 00:08:22,370
So we swap.

149
00:08:22,370 --> 00:08:26,240
Now the index that we're looking at is this index here too.

150
00:08:26,590 --> 00:08:33,470
And so now we find using that number two we find the parents of two minus one gives us 1 divided by

151
00:08:33,470 --> 00:08:37,860
two gives us one point 0.5 floored it gives us zero.

152
00:08:37,940 --> 00:08:43,970
So the index now that we're comparing it to is index 0 and we compare these two items and we end up

153
00:08:43,970 --> 00:08:48,530
swapping them and then we stop because there is no next index to look at.

154
00:08:48,530 --> 00:08:50,090
There's no parent of this.

155
00:08:50,120 --> 00:08:51,800
So you could add that into your code.

156
00:08:51,830 --> 00:08:57,250
Make sure that it you know accounts for that and it doesn't break or you don't hit it undefined or something.

157
00:08:57,400 --> 00:08:57,630
OK.

158
00:08:57,650 --> 00:08:59,210
So those are the basic steps.

159
00:08:59,220 --> 00:09:04,580
Again insert just pushed to the very end of the list or the array that you're using to store the values

160
00:09:04,850 --> 00:09:05,920
and then bubble up.

161
00:09:06,020 --> 00:09:07,740
And here's a pseudo code for bubble up.

162
00:09:07,790 --> 00:09:13,490
So try it on your own right to method if you prefer or do it all in one insert method in the next video.

163
00:09:13,550 --> 00:09:14,530
Have an implementation.

