1
00:00:00,270 --> 00:00:01,110
Welcome back.

2
00:00:01,140 --> 00:00:04,830
So now let's add a way of inserting into our tree so we have a value.

3
00:00:04,860 --> 00:00:09,030
I should be able to call insert passing the value and the tree will add it to the correct place.

4
00:00:09,030 --> 00:00:14,340
It will make the new node and then put it in the correct spot depending on what that number is.

5
00:00:14,340 --> 00:00:18,850
So for example if you're trying to insert 13 where would that go on this list.

6
00:00:18,900 --> 00:00:23,070
Well we would start and we would check how does 13 compare to 10.

7
00:00:23,280 --> 00:00:24,660
Well it's greater than 10.

8
00:00:24,870 --> 00:00:26,740
So it goes over here somewhere.

9
00:00:26,760 --> 00:00:28,180
How does it compare to 15.

10
00:00:28,440 --> 00:00:29,650
Well it's less than.

11
00:00:29,700 --> 00:00:32,160
So is there a node to the left.

12
00:00:32,460 --> 00:00:35,800
If not that's where 13 goes if there is a node.

13
00:00:35,940 --> 00:00:39,500
Then we go to that one and we check how does it compare to 13.

14
00:00:39,510 --> 00:00:40,790
Do we go to the left or the right.

15
00:00:40,920 --> 00:00:42,030
But there is no node.

16
00:00:42,120 --> 00:00:47,010
So that means this is 13 new home or on a slightly larger scale.

17
00:00:47,130 --> 00:00:48,620
If we did an insert of.

18
00:00:48,660 --> 00:00:48,930
Sure.

19
00:00:48,930 --> 00:00:50,020
Sixty eight.

20
00:00:50,070 --> 00:00:52,560
I'll posit first to check.

21
00:00:52,710 --> 00:00:53,860
Is there a route.

22
00:00:53,910 --> 00:00:56,340
If there's no route then that becomes our route.

23
00:00:56,340 --> 00:01:01,020
But there is so we compare 68 to 41 and it is greater than 41.

24
00:01:01,470 --> 00:01:02,260
So we check.

25
00:01:02,400 --> 00:01:03,750
Well is there a right.

26
00:01:03,750 --> 00:01:06,120
Is there a node over here and there is.

27
00:01:06,120 --> 00:01:09,880
So we compare 65 now to 68.

28
00:01:10,110 --> 00:01:11,890
Well 68 is still greater.

29
00:01:11,970 --> 00:01:13,760
So we're going to go to the right again.

30
00:01:15,930 --> 00:01:18,100
And now we compare 91 and 68.

31
00:01:18,140 --> 00:01:20,390
Well 68 is less than 91.

32
00:01:20,490 --> 00:01:24,850
So we go to the left and we do it again we compare it to 72.

33
00:01:24,960 --> 00:01:27,650
Well 68 is less than 72.

34
00:01:27,660 --> 00:01:29,070
Is there a left.

35
00:01:29,070 --> 00:01:30,210
No there is not.

36
00:01:30,210 --> 00:01:32,260
So that means this is where 68 goes.

37
00:01:32,280 --> 00:01:33,840
That is its new home.

38
00:01:33,840 --> 00:01:35,530
So those are the steps that we follow.

39
00:01:35,610 --> 00:01:38,440
And if you want here's the pseudo code you can do this.

40
00:01:38,530 --> 00:01:42,920
If we are recursively I think it's easiest to do it personally iterative.

41
00:01:43,140 --> 00:01:45,640
But either one will work the rough outline.

42
00:01:45,660 --> 00:01:48,360
You don't have to follow this order exactly you know verbatim.

43
00:01:48,360 --> 00:01:52,770
You don't have to create a new node on line one but at some point you create a new node and then you

44
00:01:52,770 --> 00:01:53,670
start at the root.

45
00:01:53,670 --> 00:01:56,220
You check if there is a root if there is not.

46
00:01:56,310 --> 00:01:57,450
Well that's super easy.

47
00:01:57,450 --> 00:02:01,610
You're lucky the root now becomes that new node that just means we have an empty tree.

48
00:02:01,620 --> 00:02:03,310
The very first time we insert something.

49
00:02:03,420 --> 00:02:08,280
But if there is a root you check if the value of the new node is greater than or less than the value

50
00:02:08,280 --> 00:02:09,040
of the root.

51
00:02:09,480 --> 00:02:14,670
And depending on that if it is greater we check to see if there is a node to the right.

52
00:02:15,060 --> 00:02:21,450
If there is move to that node and repeat the steps so have some sort of loop write a while loop.

53
00:02:21,480 --> 00:02:22,270
I would just do like.

54
00:02:22,290 --> 00:02:25,550
While true have something continue to go.

55
00:02:25,590 --> 00:02:30,690
If you're doing an iterative fli at least and inside of that you're just going to check if it's greater

56
00:02:31,130 --> 00:02:38,130
then move on to the next dot right and then check for greater or less than that and eventually you will

57
00:02:38,130 --> 00:02:39,660
find a place to insert it.

58
00:02:40,050 --> 00:02:43,950
So the process just one more time check if there's a route if not easy.

59
00:02:43,950 --> 00:02:44,580
It's an empty tree.

60
00:02:44,580 --> 00:02:46,980
Just add it to be the root if there is a root.

61
00:02:46,980 --> 00:02:50,550
Compare your new value to see if it's greater than or less than.

62
00:02:50,550 --> 00:02:53,900
And if it's greater then you need to check if there is a node.

63
00:02:54,000 --> 00:02:56,690
If there's nothing there then that is the new home.

64
00:02:57,000 --> 00:02:58,890
Same thing if it's less than you need to check.

65
00:02:58,890 --> 00:03:00,180
Is there a left.

66
00:03:00,330 --> 00:03:03,480
If it's not as if there is no doubt left then that's your new home.

67
00:03:03,780 --> 00:03:09,810
Otherwise you just move on to that right and you repeat the steps or you move onto the left and repeat

68
00:03:09,810 --> 00:03:11,470
the steps just like we saw here.

69
00:03:11,490 --> 00:03:13,020
We tried to insert 13.

70
00:03:13,080 --> 00:03:13,720
We check.

71
00:03:13,740 --> 00:03:14,630
Is there a route.

72
00:03:14,700 --> 00:03:15,260
Yes.

73
00:03:15,360 --> 00:03:17,480
OK so 13 is greater than 10.

74
00:03:17,520 --> 00:03:18,760
That means we need to check.

75
00:03:18,780 --> 00:03:20,140
Is there a dot right.

76
00:03:20,340 --> 00:03:20,950
Yes.

77
00:03:21,090 --> 00:03:25,740
So now this is where we start getting the same process is 13 greater than or less than 15.

78
00:03:25,740 --> 00:03:26,700
It's less then.

79
00:03:26,910 --> 00:03:28,680
So is there a left.

80
00:03:28,710 --> 00:03:29,600
No.

81
00:03:29,610 --> 00:03:33,820
So that is where 13 goes and then we would return at that point.

82
00:03:33,840 --> 00:03:38,940
So I didn't add this in the pseudo code but I think it's best to return the entire tree at the end of

83
00:03:38,940 --> 00:03:39,590
the method.

84
00:03:39,720 --> 00:03:44,460
It's not a deal breaker but that's what I like to do instead of just returning nothing or returning

85
00:03:44,460 --> 00:03:47,340
the node and return the entire tree at the very end.

86
00:03:47,430 --> 00:03:47,700
All right.

87
00:03:47,700 --> 00:03:49,770
So give it a shot in the next video.

88
00:03:49,790 --> 00:03:50,590
I'll have a solution.

