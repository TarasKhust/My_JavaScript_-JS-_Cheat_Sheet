1
00:00:00,180 --> 00:00:01,140
All right welcome back.

2
00:00:01,140 --> 00:00:04,040
Let's go ahead and write the code for insert.

3
00:00:04,470 --> 00:00:09,750
So I have a snippet over here with the same classes I showed you two videos to go.

4
00:00:09,780 --> 00:00:16,050
We have our node class value left and right and then we have our binary search tree class with which

5
00:00:16,050 --> 00:00:18,430
just has an empty root to start.

6
00:00:18,480 --> 00:00:26,280
Now I recorded this video once before and I was using this sort of basic binary tree structure because

7
00:00:26,280 --> 00:00:30,300
it's really hard honestly to visualize how this all should look like the links list is easy.

8
00:00:30,300 --> 00:00:34,470
You know you insert something it should go afterwards you end up with this linear list with a tree.

9
00:00:34,470 --> 00:00:36,760
It can be hard to keep track of where things should go.

10
00:00:37,050 --> 00:00:42,540
So I recorded the entire video and then I realized that I had messed up this entire tree.

11
00:00:42,540 --> 00:00:43,950
It just doesn't actually make sense.

12
00:00:43,950 --> 00:00:47,310
The values that I used it's not a valid binary tree.

13
00:00:47,670 --> 00:00:49,610
So we have 10 on the left side.

14
00:00:49,620 --> 00:00:50,930
Every value should be less than 10.

15
00:00:50,930 --> 00:00:54,600
So that's true on the right side every value should be greater than and then 10.

16
00:00:54,840 --> 00:00:59,280
But if we look at five to the left values are less than the right.

17
00:00:59,460 --> 00:01:01,080
Four is not greater than.

18
00:01:01,290 --> 00:01:04,620
So I should have something like 7 there.

19
00:01:04,620 --> 00:01:05,490
Same thing over here.

20
00:01:05,490 --> 00:01:06,720
I don't know what I was thinking.

21
00:01:06,790 --> 00:01:09,690
13 the left of that 14 does not work.

22
00:01:09,690 --> 00:01:13,200
So let's go with 11 for example.

23
00:01:13,200 --> 00:01:14,880
Now we have a valid tree.

24
00:01:14,940 --> 00:01:15,310
OK.

25
00:01:15,390 --> 00:01:22,470
So let's start by defining insert which takes a value and we'll just make that new node to start.

26
00:01:22,470 --> 00:01:27,190
So our new node equals new node and passing the value.

27
00:01:27,210 --> 00:01:30,280
And then let's go with the easy win which is to check.

28
00:01:30,360 --> 00:01:37,420
Is there a route already or is there not a route like if we just did try to answer 10.

29
00:01:37,440 --> 00:01:39,180
That becomes the root.

30
00:01:39,180 --> 00:01:47,540
There's nothing in there so we'll just check if this route is no then we're going to set out roots to

31
00:01:47,550 --> 00:01:52,790
equal the new node and then return this just so that we get out of this.

32
00:01:52,950 --> 00:01:55,400
None of the other code will run because we're returning.

33
00:01:55,470 --> 00:01:56,310
I run the code.

34
00:01:56,310 --> 00:01:58,130
We look at our tree.

35
00:01:58,620 --> 00:01:59,630
We've got 10.

36
00:02:00,030 --> 00:02:08,610
Now if I tried to insert something after this like three nothing happens because well technically we

37
00:02:08,610 --> 00:02:14,670
make a new node but then we never attach it or insert it and nothing is returned because this code doesn't

38
00:02:14,670 --> 00:02:15,310
run.

39
00:02:15,740 --> 00:02:16,190
OK.

40
00:02:16,290 --> 00:02:22,050
So now the bulk of the logic happens in the else portion to remember the process.

41
00:02:22,050 --> 00:02:26,890
If our tree is only 10 right now this doesn't exist.

42
00:02:26,940 --> 00:02:28,480
What we do we check.

43
00:02:28,480 --> 00:02:29,230
Is there a route.

44
00:02:29,310 --> 00:02:33,690
Well if there's not a route then we do this otherwise which is what we have here.

45
00:02:33,710 --> 00:02:40,380
The Otherwise condition we need to check is our value less than or greater than this value right here.

46
00:02:40,890 --> 00:02:43,140
And if it's less then what are we going to do.

47
00:02:43,140 --> 00:02:43,770
We're going to check.

48
00:02:43,800 --> 00:02:45,010
Is there a left.

49
00:02:45,450 --> 00:02:48,280
And if there's not then we put the value right there.

50
00:02:48,460 --> 00:02:51,260
Otherwise same thing on the right side.

51
00:02:51,270 --> 00:02:53,320
Now that's the case if there's only one node in there.

52
00:02:53,370 --> 00:02:57,070
But if our tree looks like this let's say we're inserting the number one.

53
00:02:57,240 --> 00:02:58,050
We would check.

54
00:02:58,080 --> 00:02:58,920
Is there a root.

55
00:02:58,980 --> 00:02:59,640
Yes there is.

56
00:02:59,640 --> 00:03:02,780
All right is one less than 10 or greater than it's less than.

57
00:03:02,790 --> 00:03:03,680
So then we check.

58
00:03:03,840 --> 00:03:05,240
We know it goes on the left side.

59
00:03:05,280 --> 00:03:05,850
We check.

60
00:03:05,850 --> 00:03:09,470
Is there a node on the left if it looks like this.

61
00:03:09,480 --> 00:03:11,220
We should put one right here.

62
00:03:11,220 --> 00:03:13,950
But if it looks like this while there is a note here.

63
00:03:13,950 --> 00:03:16,200
So then we compare again is one less than five.

64
00:03:16,230 --> 00:03:17,070
That's true.

65
00:03:17,070 --> 00:03:20,600
So we're going to insert it on the left somewhere do we insert it right here.

66
00:03:20,680 --> 00:03:22,250
Nope there's already a value there.

67
00:03:22,290 --> 00:03:24,250
So then we move down and repeat.

68
00:03:24,360 --> 00:03:28,270
So the process involves looping just like with a length list.

69
00:03:28,350 --> 00:03:36,330
And I'm going to make a variable called Current and current will start as the root just like in our

70
00:03:36,330 --> 00:03:42,180
linked list examples current started as this started the beginning of the linked list and we're going

71
00:03:42,180 --> 00:03:44,410
to update current as we go.

72
00:03:44,460 --> 00:03:51,000
And I'm just going to add in a while true we're going to continue over and over and over so unlike with

73
00:03:51,240 --> 00:03:56,060
the links where we had a link that we could you could add a length but it wouldn't help you here.

74
00:03:56,160 --> 00:03:58,650
I mean length isn't even really the right measurement.

75
00:03:58,650 --> 00:04:01,020
You could add like a number of nodes or something.

76
00:04:01,020 --> 00:04:02,850
But that still doesn't really help you.

77
00:04:02,880 --> 00:04:09,120
So I'm just going loop while true and I'm going to break out of this loop using a return statement.

78
00:04:09,240 --> 00:04:11,930
If we finish if we insert the node.

79
00:04:11,970 --> 00:04:17,250
So while true basically our process is going to be you know check if the value is less than or greater

80
00:04:17,250 --> 00:04:17,710
than.

81
00:04:17,940 --> 00:04:19,070
So let's do that now.

82
00:04:19,320 --> 00:04:28,480
Well just to if value is less then and then current value if that's the case that means it's going to

83
00:04:28,480 --> 00:04:31,540
go on the left somewhere over here.

84
00:04:31,810 --> 00:04:34,970
But we first need to check is there current data left.

85
00:04:34,990 --> 00:04:42,100
So another conditional if current dot left is equal to know if there is nothing on the left and we found

86
00:04:42,100 --> 00:04:46,450
our spot eventually like if we if we end up here this is current.

87
00:04:46,840 --> 00:04:52,630
If there's no left in the value is less than this value then we insert it to the left.

88
00:04:53,140 --> 00:04:53,510
OK.

89
00:04:53,530 --> 00:04:59,540
So we'll just say current left equals new node and then return we're done.

90
00:04:59,590 --> 00:05:01,210
We don't want this loop to keep going.

91
00:05:01,210 --> 00:05:05,490
Now this code will actually work only if we insert like 10 and then 5.

92
00:05:05,500 --> 00:05:11,740
It's not going to work if we insert something after that because if we insert 10 that's all that we

93
00:05:11,740 --> 00:05:15,200
have then we check if value is less than current value.

94
00:05:15,200 --> 00:05:17,820
If this is current yes 5 is less than 10.

95
00:05:17,830 --> 00:05:18,740
There is no left.

96
00:05:18,760 --> 00:05:20,820
So we've set five right here.

97
00:05:21,130 --> 00:05:27,190
And if we just verified that if I run this code and I look at the tree then we look at the root and

98
00:05:27,190 --> 00:05:28,290
then we look to its left.

99
00:05:28,300 --> 00:05:29,600
We have five.

100
00:05:29,680 --> 00:05:30,150
OK.

101
00:05:30,280 --> 00:05:36,880
But it wouldn't work if we tried to insert two or 13 or any other value to the right or to the left.

102
00:05:36,880 --> 00:05:43,360
So although we need to do if it is less than 10 or whatever the route is but there is already a value

103
00:05:43,360 --> 00:05:44,010
here.

104
00:05:44,500 --> 00:05:49,060
Then we need to move current to now be 5 and then we do the same thing.

105
00:05:49,180 --> 00:05:54,120
And if there's already a value to the left or to the right then we update current two whichever one

106
00:05:54,130 --> 00:05:54,730
it should be.

107
00:05:54,730 --> 00:05:56,050
And then we check again.

108
00:05:56,050 --> 00:05:58,590
So really here all that we need.

109
00:05:58,590 --> 00:05:59,170
Nice and short.

110
00:05:59,170 --> 00:06:02,710
It's just current equals current left.

111
00:06:02,890 --> 00:06:08,560
So we're moving to current left because the value is less than the current value.

112
00:06:09,010 --> 00:06:13,490
So if this is what our tree looks like and we're trying to insert the numbers three we'd start here.

113
00:06:13,600 --> 00:06:18,620
Three is less than 10 so we need we know we need to look to the left but there already is a left.

114
00:06:18,640 --> 00:06:20,330
So this part does not run.

115
00:06:20,620 --> 00:06:21,860
So we update current.

116
00:06:21,880 --> 00:06:23,670
Now we 5 and do the same thing.

117
00:06:23,710 --> 00:06:27,380
This time there is no left so we insert right here.

118
00:06:28,020 --> 00:06:28,550
OK.

119
00:06:28,750 --> 00:06:36,040
So this is just handling the left side and we could verify that it works by inserting like the number

120
00:06:36,040 --> 00:06:36,390
two.

121
00:06:36,400 --> 00:06:45,190
For example if we run this our tree should have root of 10 the left of 10 should be five and the left

122
00:06:45,190 --> 00:06:46,150
of that should be two.

123
00:06:46,170 --> 00:06:48,660
We have no right set up on any of them.

124
00:06:48,820 --> 00:06:53,060
So we just need to basically do the same thing for the right side.

125
00:06:53,110 --> 00:06:58,620
So I'll do LCF value is greater than current value.

126
00:06:58,660 --> 00:07:04,240
If that's the case we're going to check if current right is no.

127
00:07:04,870 --> 00:07:12,050
If it is then we found our spot current outright equals new node return this otherwise.

128
00:07:12,130 --> 00:07:13,420
Keep looking.

129
00:07:13,660 --> 00:07:23,440
Update current so that we traverse further current equals current rates and we should be good to go

130
00:07:23,440 --> 00:07:24,140
here.

131
00:07:24,250 --> 00:07:26,230
See if I have any typos or any issues.

132
00:07:26,230 --> 00:07:28,330
Let's now also insert some other value.

133
00:07:28,340 --> 00:07:46,430
So 10 5 2 but do try to insert 13 to 11 and 16 and also said OK let's run this.

134
00:07:46,660 --> 00:07:48,440
Here we go we've got our tree.

135
00:07:49,010 --> 00:07:52,570
And what should we explore explored first let's go down the right side this time.

136
00:07:52,580 --> 00:07:57,780
So here's our route of 10 and to the right we should have 13 which we do.

137
00:07:59,450 --> 00:08:01,230
To the left we have 11.

138
00:08:01,340 --> 00:08:04,160
And to the right we have 16 that all looks good.

139
00:08:04,160 --> 00:08:09,950
Let's check the left on the left we should have five to the left of that we have to the left that we

140
00:08:09,950 --> 00:08:21,830
have 7 let's just verify it still works let's say we insert what about 3 where should that go.

141
00:08:21,990 --> 00:08:25,320
Well defend the left side and we find two.

142
00:08:25,410 --> 00:08:27,530
It goes to the right of two.

143
00:08:27,740 --> 00:08:33,620
So if we look at tree and we look at the route then we look at the left which is five.

144
00:08:33,670 --> 00:08:35,010
The left has two.

145
00:08:35,110 --> 00:08:37,410
And then the right of that is now three.

146
00:08:37,420 --> 00:08:42,220
So we basically inserted it this diagram is getting ugly but we inserted it right there.

147
00:08:43,600 --> 00:08:44,020
OK.

148
00:08:44,060 --> 00:08:45,370
So it looks like it's working.

149
00:08:45,650 --> 00:08:50,470
Let's see how does it handle or does it handle duplicates.

150
00:08:50,480 --> 00:08:57,390
So if I tried to insert 10 for example what happens.

151
00:08:57,780 --> 00:09:00,140
Well I had to restart my browser.

152
00:09:00,140 --> 00:09:05,460
Or at least this window because we hit an infinite loop and I was trying to illustrate that but I didn't

153
00:09:05,460 --> 00:09:09,810
actually think it through there was nothing to show you looping infinitely all that you wish saw or

154
00:09:09,810 --> 00:09:14,260
would have seen it's just my computer get hung up and me being unable to type.

155
00:09:14,280 --> 00:09:18,990
So we got an infinite loop because if I tried to insert 10 or any of these numbers that are already

156
00:09:18,990 --> 00:09:25,680
in there we have this while true but we're only checking if the value is less than or greater than.

157
00:09:25,680 --> 00:09:30,900
Now how is how we actually handle duplicates is really up to the special case of what we're doing the

158
00:09:30,900 --> 00:09:31,880
specifics.

159
00:09:31,920 --> 00:09:34,000
Some people are just going to ignore them.

160
00:09:34,020 --> 00:09:36,210
Some people some trees just ignore them outright.

161
00:09:36,210 --> 00:09:37,290
That's what we'll do.

162
00:09:37,530 --> 00:09:42,150
We could just add a check in here to see if the value is equal to current value.

163
00:09:42,240 --> 00:09:46,750
Then we will just return false or undefined or something.

164
00:09:46,770 --> 00:09:52,740
The other option though that you might see is if you need to know like if we're inserting certain things

165
00:09:52,740 --> 00:09:54,490
over and over you want to keep track of that.

166
00:09:54,570 --> 00:09:59,280
You could add a frequency or a count to the node and you could increment that.

167
00:09:59,370 --> 00:10:02,040
So next to each node we can have accounts like this.

168
00:10:02,040 --> 00:10:06,550
And you know maybe we have four six teens are in there for some reason and two tens.

169
00:10:06,750 --> 00:10:12,030
So if you needed that you could do that but I'm just going to add an if at the very beginning if value

170
00:10:12,420 --> 00:10:19,960
is equal to current value then let's return undefined or something undefined.

171
00:10:20,320 --> 00:10:22,290
OK let's try running this again.

172
00:10:22,320 --> 00:10:24,080
We look at our tree.

173
00:10:24,270 --> 00:10:25,230
Everything looks good.

174
00:10:25,240 --> 00:10:26,680
Ten five two.

175
00:10:26,700 --> 00:10:27,140
OK.

176
00:10:27,660 --> 00:10:31,260
Let's try inserting 10 again.

177
00:10:31,860 --> 00:10:36,370
We get undefined and if we look at the tree it's still still works.

178
00:10:36,540 --> 00:10:39,150
Not that hopefully nothing should be changed.

179
00:10:39,150 --> 00:10:45,720
Everything still works if we tried to insert something other than 10 that's already in there like 7.

180
00:10:45,750 --> 00:10:50,130
It takes a little bit because it does have to traverse the tree until it finds the right spot and it

181
00:10:50,130 --> 00:10:52,030
realizes oh this is already in there.

182
00:10:52,170 --> 00:10:52,420
OK.

183
00:10:52,440 --> 00:10:53,050
We're done.

184
00:10:53,280 --> 00:10:57,260
Lastly some people get a little up in arms about this.

185
00:10:57,300 --> 00:11:00,090
You can simplify some of this logic.

186
00:11:00,090 --> 00:11:03,130
There's a couple of places that are unnecessary.

187
00:11:03,360 --> 00:11:11,730
For example here if value is less than current value we check if there's currently a left and we return.

188
00:11:11,760 --> 00:11:18,840
And before I had an else here but because there's only two options and four returning here we don't

189
00:11:18,840 --> 00:11:23,500
necessarily have to have the else it's just a stylistic thing so I have both solutions.

190
00:11:23,520 --> 00:11:27,600
This one is a little longer but it's more explicit about things.

191
00:11:28,330 --> 00:11:31,370
So there's else's same thing here.

192
00:11:31,710 --> 00:11:36,490
This else is well we don't have to have We're checking if the route is no return.

193
00:11:36,600 --> 00:11:41,550
If it is we're done elsewhere we don't have to have the else we could just start.

194
00:11:41,550 --> 00:11:42,890
So that's what I did here.

195
00:11:43,170 --> 00:11:47,000
But just tiny changes really ascertain if you prefer the solution.

196
00:11:47,080 --> 00:11:48,270
Yeah you can use this one.

197
00:11:48,270 --> 00:11:52,890
It's really the same logic just slightly less explicit but also less verbose.

