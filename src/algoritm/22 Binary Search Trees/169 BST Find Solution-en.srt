1
00:00:00,320 --> 00:00:04,560
Already let's implement find on our B S T class.

2
00:00:04,620 --> 00:00:11,790
So the first thing we'll do is just add the method find which accepts a value and we have a couple of

3
00:00:12,000 --> 00:00:13,960
couple of optimizations we can make at the end.

4
00:00:13,950 --> 00:00:16,100
But I'm just going to start by following this.

5
00:00:16,140 --> 00:00:18,210
We're going to check if there's a route.

6
00:00:18,330 --> 00:00:19,780
So that's simple.

7
00:00:19,860 --> 00:00:27,780
If this route is no then we're just going to return what we want to return undefined false.

8
00:00:28,080 --> 00:00:31,390
Let's just say we want this to be true or false.

9
00:00:31,410 --> 00:00:34,370
So we're going to say that it either returns true or false.

10
00:00:34,380 --> 00:00:39,690
So if there's nothing in there then we can't find the value returned false.

11
00:00:39,760 --> 00:00:40,680
That's nice.

12
00:00:40,770 --> 00:00:42,910
If we run it we make a new a new tree.

13
00:00:42,930 --> 00:00:46,330
Call it the new binary search tree.

14
00:00:46,370 --> 00:00:48,540
We do not find one.

15
00:00:48,540 --> 00:00:49,520
We should get false.

16
00:00:49,650 --> 00:00:51,460
All right so that's out of the way.

17
00:00:51,480 --> 00:00:56,910
Now what I'm going to do is make a variable called Start and I'm going to start equal the roots.

18
00:00:56,910 --> 00:00:58,920
You can also call it current.

19
00:00:59,060 --> 00:01:01,250
I kind of actually prefer current.

20
00:01:01,410 --> 00:01:02,610
So I'm not going to call it start.

21
00:01:02,630 --> 00:01:09,270
OK with current and then let's make another variable and this one is going to be called found and it

22
00:01:09,270 --> 00:01:10,280
starts as false.

23
00:01:10,350 --> 00:01:11,940
So found just keeps track of.

24
00:01:11,940 --> 00:01:13,480
If we've found the item yet.

25
00:01:13,740 --> 00:01:18,850
Then we need to get to the bulk of our logic which involves basically looping.

26
00:01:18,900 --> 00:01:25,850
So I'll do a while loop and we want to loop while not found so while we haven't found the thing.

27
00:01:26,280 --> 00:01:33,020
But also while there is a current so I'll explain why in just a moment.

28
00:01:33,030 --> 00:01:39,120
But we want to keep going because if we let's say we never find it right it's not in there.

29
00:01:39,120 --> 00:01:40,920
Found is always going to be false.

30
00:01:40,950 --> 00:01:46,230
So we also need to make sure this loop doesn't go forever so current is going to be our value that as

31
00:01:46,230 --> 00:01:50,970
soon as there is no current whenever there is you know we've hit the end of the tree we can't update

32
00:01:50,970 --> 00:01:51,820
current at all.

33
00:01:51,860 --> 00:01:54,720
It's no then our loop will stop.

34
00:01:54,720 --> 00:02:00,350
So basically this is while there is something to loop over and we haven't found it what do we do.

35
00:02:00,420 --> 00:02:07,640
Let's start by just checking if the value is less than current dot value.

36
00:02:07,830 --> 00:02:14,300
If it is left less than then we're going to say current is now equal to current left.

37
00:02:14,400 --> 00:02:16,620
We know that it needs to be on the left side.

38
00:02:16,620 --> 00:02:20,840
So for example if this is a tree we have and we're looking for two.

39
00:02:21,240 --> 00:02:28,530
Well if we did a tree up find two we're going to set current to equal this node and then found it's

40
00:02:28,530 --> 00:02:29,400
going to be false.

41
00:02:29,430 --> 00:02:33,070
So we check 2 is less than current value that's true.

42
00:02:33,180 --> 00:02:35,360
So now current is this.

43
00:02:35,550 --> 00:02:37,110
And so we start again.

44
00:02:37,140 --> 00:02:43,770
So let's do the same thing with an LCF value is greater than current value.

45
00:02:43,950 --> 00:02:51,630
If that's the case current equals current right now we're missing the most important part which is the

46
00:02:51,630 --> 00:02:52,250
else.

47
00:02:52,380 --> 00:02:55,730
If we found it we're going to set found equals true.

48
00:02:55,740 --> 00:03:01,530
So this is if it's less than this is if it's greater than the only other option is that it's equal to.

49
00:03:01,560 --> 00:03:03,590
So we'll set found true.

50
00:03:03,720 --> 00:03:07,450
And then the loop should be done because this is now false.

51
00:03:07,500 --> 00:03:10,000
Not found not true is false.

52
00:03:10,230 --> 00:03:11,090
So we're done here.

53
00:03:11,220 --> 00:03:14,450
Then after this while loop we'd need to return the node.

54
00:03:14,550 --> 00:03:17,330
Well that was pretty unclear about this honestly in instructions.

55
00:03:17,340 --> 00:03:24,470
I regret that if you should return the note itself or return true or false to see if it contains it

56
00:03:25,290 --> 00:03:26,510
let's return the node.

57
00:03:26,520 --> 00:03:27,990
So that's going to be current.

58
00:03:28,050 --> 00:03:35,280
I apologize if you implemented one solution and I did the opposite here but the logic is the same either

59
00:03:35,280 --> 00:03:40,460
way we could return true right here if we found it we can return current.

60
00:03:40,710 --> 00:03:41,170
Okay.

61
00:03:41,430 --> 00:03:47,760
So I'm going to return current at the end and then we also want to check if it's never found we should

62
00:03:47,760 --> 00:03:52,570
return something because right now ups did not mean to do that.

63
00:03:52,650 --> 00:03:58,730
If we run this code we've got our tree values that have all of these.

64
00:03:58,740 --> 00:04:00,610
So if I look for.

65
00:04:00,990 --> 00:04:05,000
You know try to find 5 for example.

66
00:04:05,250 --> 00:04:05,730
Okay.

67
00:04:05,850 --> 00:04:08,880
It was in their tree up find 10 that's in there.

68
00:04:08,960 --> 00:04:12,400
It Out find this time to that's also in there.

69
00:04:12,510 --> 00:04:13,030
OK.

70
00:04:13,170 --> 00:04:15,000
But what about 100.

71
00:04:15,300 --> 00:04:16,290
That's not in there.

72
00:04:16,500 --> 00:04:20,360
So we're getting no instead of No.

73
00:04:20,940 --> 00:04:23,820
I think it would be better to return false.

74
00:04:24,090 --> 00:04:27,800
So to do that we could just add an if statement here.

75
00:04:27,900 --> 00:04:36,540
If it's not found not found return false or actually I think undefined might be better but doesn't really

76
00:04:36,540 --> 00:04:36,820
matter.

77
00:04:36,840 --> 00:04:39,520
But just some value here to indicate it's not in there.

78
00:04:39,720 --> 00:04:44,010
And if we wanted to so just to be fair if we wanted to do that.

79
00:04:44,160 --> 00:04:45,260
True or false version.

80
00:04:45,260 --> 00:04:50,790
So it doesn't actually return the node it just returns true or false so maybe I'll call it contains

81
00:04:50,850 --> 00:04:52,280
value.

82
00:04:52,290 --> 00:04:55,970
It's a little simpler because if we find it we can return true.

83
00:04:56,430 --> 00:04:58,330
And we don't need this here.

84
00:04:58,350 --> 00:05:00,750
We can just return false OK.

85
00:05:00,790 --> 00:05:03,480
So if we find it if it's equal we return true.

86
00:05:03,850 --> 00:05:06,280
And then the only way we get here is if it's not in there.

87
00:05:06,280 --> 00:05:08,000
So we return false.

88
00:05:08,020 --> 00:05:17,830
So if I run this one would you treat dot contains one that's false but 10 is in there so it's two and

89
00:05:17,830 --> 00:05:19,060
16 I think.

90
00:05:19,210 --> 00:05:21,210
But 18 is not in there.

91
00:05:21,480 --> 00:05:21,820
OK.

92
00:05:21,850 --> 00:05:28,210
So sort of out of left field but I just had to do two implementations one true or false only returned

93
00:05:28,210 --> 00:05:34,450
values called contains the other one is called Find and it actually returns the value the node itself.

94
00:05:34,450 --> 00:05:35,430
If it's in there.

95
00:05:35,850 --> 00:05:36,310
OK.

