1
00:00:00,150 --> 00:00:00,740
All right.

2
00:00:00,810 --> 00:00:02,080
So we talked about objectives.

3
00:00:02,080 --> 00:00:04,470
We did a little story with Martin and the dragon.

4
00:00:04,470 --> 00:00:09,510
Now let's actually get a formal definition of what recursion is and secondly let's talk about why you

5
00:00:09,510 --> 00:00:10,470
should care.

6
00:00:10,470 --> 00:00:15,450
I did a little bit of well I wasn't trying to scare anyone but I did a little bit of talking at the

7
00:00:15,450 --> 00:00:18,430
beginning about how recursion can be tricky.

8
00:00:18,450 --> 00:00:22,500
So let's talk about why it's worth it why you should care and why you should push through it.

9
00:00:22,500 --> 00:00:24,580
If you do have a hard time getting it right away.

10
00:00:24,870 --> 00:00:27,670
But first definition what is recursion.

11
00:00:28,020 --> 00:00:30,610
It's just a process that calls itself.

12
00:00:30,750 --> 00:00:36,510
And in our case in everything we do in javascript or in code when we say recursion we're referring to

13
00:00:36,510 --> 00:00:38,950
a function that calls itself.

14
00:00:38,970 --> 00:00:43,480
So we've seen many a function that calls other functions that's very very common.

15
00:00:43,500 --> 00:00:47,730
We can have a function called laugh and inside of it we would call cancel out log.

16
00:00:47,730 --> 00:00:50,840
Potentially that's a function call instead of a function.

17
00:00:50,880 --> 00:00:54,760
What's different about recursive functions is they call them self.

18
00:00:54,780 --> 00:01:02,910
So our life function inside would call laugh and you can imagine first of all that and that might make

19
00:01:02,910 --> 00:01:03,900
your head hurt already.

20
00:01:04,050 --> 00:01:06,730
But then imagine that it's happening over and over and over again.

21
00:01:06,810 --> 00:01:12,450
And there has to be some endpoint or if we go back to this slide here.

22
00:01:13,260 --> 00:01:16,810
Here we have imagine that we have a function called check for odd.

23
00:01:17,040 --> 00:01:23,910
We would call it here and then in check for odd it would call itself again on a smaller list and then

24
00:01:23,910 --> 00:01:27,960
that would call check for odds over and over and over again there has to be an endpoint of course or

25
00:01:27,960 --> 00:01:30,370
else we just keep going like an infinite loop.

26
00:01:30,690 --> 00:01:32,850
But it's slightly different than an infinite loop.

27
00:01:32,850 --> 00:01:33,600
But we'll get there.

28
00:01:33,720 --> 00:01:34,550
So let's leave it at that.

29
00:01:34,550 --> 00:01:36,360
It's a function that calls itself.

30
00:01:36,540 --> 00:01:38,370
Now why should you care.

31
00:01:38,460 --> 00:01:40,070
Why do you need to know this.

32
00:01:40,080 --> 00:01:41,010
There's a bunch of reasons.

33
00:01:41,010 --> 00:01:42,300
First of all it's everywhere.

34
00:01:42,300 --> 00:01:43,760
It's used all the time.

35
00:01:43,770 --> 00:01:47,580
We're going to use it a lot in the course for a lot of the solutions we write later on.

36
00:01:47,760 --> 00:01:53,340
But even before that if you've been writing javascript you've probably been using recursive function

37
00:01:53,400 --> 00:01:59,700
without knowing things like J sound parser based on that string of phi if you've ever made an AJAX call

38
00:01:59,730 --> 00:02:05,500
and gotten Jaison back and turned that into javascript then you may have called a recursive function.

39
00:02:05,580 --> 00:02:11,850
Now Jason Jason that string of phi are up to the javascript engine to implement.

40
00:02:11,880 --> 00:02:13,690
So Mozilla has their own.

41
00:02:14,100 --> 00:02:15,080
What's it called Rhino.

42
00:02:15,090 --> 00:02:16,950
I think their own implementation.

43
00:02:16,950 --> 00:02:21,210
Where are they right Jason and parse how they want to and it doesn't have to be written recursively

44
00:02:21,480 --> 00:02:22,680
but it often is.

45
00:02:22,800 --> 00:02:27,090
So the point that I want to make is not that it's guaranteed that you've called a recursive function

46
00:02:27,120 --> 00:02:30,920
but that Jason that parse is often written recursively.

47
00:02:31,020 --> 00:02:35,690
And actually I have the source code open for Rhyno and this is here.

48
00:02:35,700 --> 00:02:39,960
So this is the engine that Mozilla uses and it is it's written in Java.

49
00:02:40,080 --> 00:02:42,250
So don't worry about the syntax.

50
00:02:42,420 --> 00:02:48,810
But if we look it's not as simple as Jaisalmer up parts calling JS that parse immediately instead.

51
00:02:48,900 --> 00:02:51,440
There is a function called Read value.

52
00:02:51,480 --> 00:02:55,770
This method here and read value calls things like read object.

53
00:02:55,770 --> 00:02:57,960
So let's just focus on those two read value.

54
00:02:57,960 --> 00:03:04,260
You call that it calls read object will we look at read object in the middle of read object if we scroll

55
00:03:04,260 --> 00:03:06,970
down a bit it calls read value again.

56
00:03:07,560 --> 00:03:13,040
So then read value is called and that could call read object and we end up with this cycle where even

57
00:03:13,090 --> 00:03:15,760
the spread across two different methods.

58
00:03:15,900 --> 00:03:22,230
They are calling each other so read value is calling read object which is calling read value which calls

59
00:03:22,230 --> 00:03:25,110
read object and it's a cycle that goes over and over and over.

60
00:03:25,110 --> 00:03:26,770
So that's an example of recursion.

61
00:03:26,910 --> 00:03:29,210
But let me show you a simpler implementation.

62
00:03:29,340 --> 00:03:31,980
Here's a simpler implementation written in Javascript.

63
00:03:32,190 --> 00:03:37,710
So this is not actually what's used in any of the browsers because browsers aren't written Javascript

64
00:03:37,710 --> 00:03:39,360
isn't written in Javascript.

65
00:03:39,450 --> 00:03:42,630
But here's an implementation to show what it would look like.

66
00:03:42,630 --> 00:03:44,120
So I'm going to take a look.

67
00:03:44,130 --> 00:03:48,900
There's this method called a walk which is here's something up here so it's called Walk and instead

68
00:03:48,900 --> 00:03:51,100
of walk it's calling walk.

69
00:03:51,130 --> 00:03:54,830
I don't know if you can see that oh no i lost it.

70
00:03:54,830 --> 00:03:55,910
There we are.

71
00:03:55,950 --> 00:03:59,220
So walk is called instead of walk it calls itself over and over.

72
00:03:59,300 --> 00:04:00,660
I'm getting tired of saying the word walk.

73
00:04:00,660 --> 00:04:03,270
It starts to sound very bizarre when I repeat it that much.

74
00:04:03,270 --> 00:04:06,210
But what it's doing if you think of a on a string.

75
00:04:06,330 --> 00:04:08,410
It's all nested when it says walk.

76
00:04:08,550 --> 00:04:14,640
It's going to move down to the next line or to the next thing to parse over and over and over until

77
00:04:14,640 --> 00:04:15,460
it hits the end.

78
00:04:15,590 --> 00:04:21,420
OK so a bit of a tangent but maybe somewhat interesting that there are two examples Jason to parse that

79
00:04:21,420 --> 00:04:24,350
string ify document get element by ID.

80
00:04:24,420 --> 00:04:30,810
And DOM traversal algorithms so remember that the Dahmus is tree structure where we have all these nested

81
00:04:30,810 --> 00:04:31,610
things.

82
00:04:31,630 --> 00:04:36,160
Could be a hundred layers nested full of you know a div instead of a div instead of a div.

83
00:04:36,210 --> 00:04:41,340
And if we're trying to search through all of them one popular approach is to write code that does it

84
00:04:41,340 --> 00:04:46,160
recursively object traversal which is just like traversing Jaison.

85
00:04:46,170 --> 00:04:52,200
Now aside from these functions like Jason to parse and get element by id query selector things that

86
00:04:52,320 --> 00:04:57,330
we've used before probably we're also going to be writing a lot of our own recursive functions later

87
00:04:57,330 --> 00:04:57,780
on.

88
00:04:57,810 --> 00:05:03,300
So when we write our own data structures when we create trees or graphs for example when we want to

89
00:05:03,300 --> 00:05:06,880
traverse them we want to search for something across them.

90
00:05:06,960 --> 00:05:09,540
Often the solutions involve recursion.

91
00:05:09,540 --> 00:05:12,660
Now remember you don't have to do anything recursively but it's a nice.

92
00:05:12,660 --> 00:05:14,340
Sometimes it's easier let's put it that way.

93
00:05:14,340 --> 00:05:19,570
It's cleaner and simpler to understand rather than doing it without recursion and it just got ahead

94
00:05:19,590 --> 00:05:20,800
of my bullet point here.

95
00:05:20,930 --> 00:05:23,360
And sometimes a cleaner alternative to iteration.

96
00:05:23,610 --> 00:05:24,750
So we'll see some examples.

97
00:05:24,750 --> 00:05:28,200
We're going to write a couple of functions both ways with and without recursion.

98
00:05:28,240 --> 00:05:31,830
And I think we'll make it a little clearer that sometimes it's nicer.

99
00:05:32,160 --> 00:05:33,570
So why you should care.

100
00:05:33,610 --> 00:05:34,650
1 it's everywhere.

101
00:05:34,650 --> 00:05:35,590
You've been using it.

102
00:05:35,670 --> 00:05:40,980
That's that doesn't really matter I guess because it doesn't impact how you use things like Jason that

103
00:05:41,040 --> 00:05:45,340
parse but it really is important once you get into these more advanced data structures.

104
00:05:45,450 --> 00:05:51,540
And we're writing our own parts functions on our own get element by id traversing a tree for example.

105
00:05:51,540 --> 00:05:51,800
All right.

106
00:05:51,810 --> 00:05:53,020
So we leave this video off here.

