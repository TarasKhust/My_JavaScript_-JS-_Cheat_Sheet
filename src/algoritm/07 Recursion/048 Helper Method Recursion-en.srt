1
00:00:00,180 --> 00:00:01,060
Welcome back.

2
00:00:01,140 --> 00:00:07,080
Next I'd like to introduce a design pattern that's commonly used with recursion called hoper method

3
00:00:07,080 --> 00:00:07,780
recursion.

4
00:00:07,860 --> 00:00:14,390
So far all the recursive functions we've written are single standalone functions like factorial.

5
00:00:14,430 --> 00:00:21,180
It is recursive itself we call factorial from outside the function and factorial itself calls factorial

6
00:00:21,540 --> 00:00:23,520
inside its own code.

7
00:00:23,520 --> 00:00:28,890
That's been the case with all the functions we've written so far with helper method recursion.

8
00:00:28,950 --> 00:00:30,010
It's a little bit different.

9
00:00:30,120 --> 00:00:31,800
So this code doesn't actually do anything.

10
00:00:31,800 --> 00:00:37,510
This is sort of just a pattern that I'm laying out but with helper method recursion we have two functions.

11
00:00:37,530 --> 00:00:43,320
We have the outer function here and then inside we have our recursive function.

12
00:00:43,320 --> 00:00:46,800
So this recursive function calls itself as you can see here.

13
00:00:47,070 --> 00:00:50,880
Again this is just the pattern I'm going to show you a concrete example that does something in just

14
00:00:50,880 --> 00:00:51,490
a moment.

15
00:00:51,660 --> 00:00:54,610
That's what's called a helper function or a helper method recursion.

16
00:00:54,630 --> 00:01:00,480
We have our main outer function that we would call like a developer from outside here we would call

17
00:01:00,480 --> 00:01:04,410
outer and pass something in and then inside the code of outer.

18
00:01:04,500 --> 00:01:10,340
There is another function defined and it is called and it calls itself recursively.

19
00:01:10,340 --> 00:01:15,960
So this is commonly done when we need to compile something like an array or a list of data.

20
00:01:16,020 --> 00:01:21,420
We're not simply tabulating we're not multiplying one value over and over and over like we work with

21
00:01:21,420 --> 00:01:25,590
factorial or something different something range.

22
00:01:25,620 --> 00:01:26,970
That was another one we did.

23
00:01:27,120 --> 00:01:34,140
If we're doing something like this collecting all the odd values in an array it's very easy to do helper

24
00:01:34,140 --> 00:01:35,540
method recursion.

25
00:01:35,640 --> 00:01:42,780
We create an empty array where we will then store our data in and then we call our helper function.

26
00:01:42,780 --> 00:01:43,890
So the reason we do this.

27
00:01:43,890 --> 00:01:50,590
If I just tried to define a function called collect odds which accepts a list of names.

28
00:01:50,760 --> 00:01:57,640
If I tried to make a variable called result and I set it to be an empty array.

29
00:01:57,660 --> 00:02:00,720
This is where we're going to put the odd numbers.

30
00:02:00,720 --> 00:02:06,210
Well if we're doing a recursive function no matter what I put after this every time it is called result

31
00:02:06,210 --> 00:02:08,570
will be reset to be an empty array.

32
00:02:08,730 --> 00:02:10,580
So how are we going to collect our data.

33
00:02:10,590 --> 00:02:14,270
How are we going to have this piece that persists throughout.

34
00:02:14,520 --> 00:02:24,900
And one easy solution is to define result outside of collect odds like this and then add two results

35
00:02:25,140 --> 00:02:30,720
in here and rather than having a result float around in the middle of nowhere like this.

36
00:02:30,720 --> 00:02:35,870
We use helper method recursion which really just means defining a function around it.

37
00:02:35,880 --> 00:02:40,140
So here's my solution for a solution to this problem.

38
00:02:40,200 --> 00:02:48,230
Looks like I'm missing a bracket update that slide it is ok zoomed in too much.

39
00:02:48,240 --> 00:02:53,780
So what we have here is collect odd values which is what we would actually call down here.

40
00:02:54,000 --> 00:02:56,350
Will pass in like I don't know.

41
00:02:56,350 --> 00:03:03,870
Let's do a simple one something like this and it takes that array in it makes our result array that's

42
00:03:03,920 --> 00:03:04,680
empty.

43
00:03:04,700 --> 00:03:11,480
Then here is our recursive logic and ignoring that for just a moment we call the helper function which

44
00:03:11,480 --> 00:03:15,580
you defined here with the array and then we return results.

45
00:03:15,680 --> 00:03:16,750
That was to find a peer.

46
00:03:16,760 --> 00:03:20,800
So this is going to manipulate results who will be adding to result.

47
00:03:20,840 --> 00:03:25,730
And again the reason we do this is that if we tried to define result inside of here it would be reset

48
00:03:25,760 --> 00:03:27,790
to an empty array every time through.

49
00:03:28,010 --> 00:03:30,590
So with the help or method recursion we can get around that.

50
00:03:30,860 --> 00:03:36,500
And this is a common pattern when we are trying to compile some sort of result usually an array or some

51
00:03:36,500 --> 00:03:39,350
other sort of data structure along those lines.

52
00:03:39,380 --> 00:03:45,320
So the actual logic here if we do want to walk through this if we look at helper it's executed at the

53
00:03:45,320 --> 00:03:46,830
bottom with array.

54
00:03:46,850 --> 00:03:48,530
So this is array.

55
00:03:48,530 --> 00:03:55,330
This is passed in and we have a base case where if the helper input is empty if the length this year

56
00:03:55,330 --> 00:03:56,930
row we just return.

57
00:03:56,930 --> 00:04:04,540
Otherwise we check if the first input or the first element mod 2 is not equal to zero.

58
00:04:04,540 --> 00:04:06,240
That means that it's odd.

59
00:04:06,580 --> 00:04:09,580
So if it's not divisible by 2 cleanly it's odd.

60
00:04:09,670 --> 00:04:12,990
So we push helper and input 0 into Brazil.

61
00:04:13,390 --> 00:04:16,510
Then the next thing that we do is call helper.

62
00:04:16,600 --> 00:04:20,890
But this time we call it on everything else in the array.

63
00:04:20,890 --> 00:04:22,620
Excluding that first element.

64
00:04:22,960 --> 00:04:29,000
So we make a submarine like this a smaller array and we pass that in to helper and we run it again.

65
00:04:29,320 --> 00:04:30,460
And it's not empty.

66
00:04:30,460 --> 00:04:31,930
So we don't return.

67
00:04:32,200 --> 00:04:36,660
And then we take the first element which is this and we check if it's even or odd.

68
00:04:36,850 --> 00:04:37,800
Well it's even this time.

69
00:04:37,800 --> 00:04:39,200
So this doesn't run.

70
00:04:39,220 --> 00:04:42,720
So then we call a helper again helper and put that slice 1.

71
00:04:42,730 --> 00:04:46,180
So this time instead of this subarray we look at this one.

72
00:04:46,180 --> 00:04:50,560
So we're always looking at the first element and we're shrinking that array shrinking and shrinking

73
00:04:50,560 --> 00:04:53,830
it until it's empty and we return OK.

74
00:04:54,130 --> 00:04:55,890
So that's the logic behind it.

75
00:04:56,080 --> 00:04:59,730
But this pattern whether it's odd values or we're doing something else.

76
00:04:59,770 --> 00:05:02,950
So later in the course this is a flash forward.

77
00:05:03,010 --> 00:05:06,890
Do not worry about understanding any of this but this is from the graph section of the course.

78
00:05:07,030 --> 00:05:11,650
We did find a method called depth first recursive which has a result variable.

79
00:05:11,830 --> 00:05:16,120
And this actually is it's an example of helper method recursion.

80
00:05:16,120 --> 00:05:22,840
Here is the helper method defined inside of our other function and we call it down here and it's updating

81
00:05:22,840 --> 00:05:24,320
the result variable.

82
00:05:24,380 --> 00:05:25,630
Anyway we'll come back to this.

83
00:05:25,690 --> 00:05:26,470
Not the focus.

84
00:05:26,470 --> 00:05:28,510
I just wanted to show you that this is a real thing.

85
00:05:28,570 --> 00:05:31,160
I'm not just making it up or showing it to you for no reason.

86
00:05:31,300 --> 00:05:35,750
This is an actual traversal of a graph data structure something a little more complex.

87
00:05:36,030 --> 00:05:36,550
OK.

88
00:05:36,730 --> 00:05:43,030
So this is one way of doing this solution but this is not the only way of writing collect odd values

89
00:05:43,240 --> 00:05:44,170
recursively.

90
00:05:44,170 --> 00:05:50,500
You can do it without a helper function you can do it without having to define result outside in a different

91
00:05:50,500 --> 00:05:54,020
scope and then updating results.

92
00:05:54,130 --> 00:05:58,840
It's just that this is simplistic it's easier to understand in the next video.

93
00:05:58,870 --> 00:06:00,030
I'm going to show you how to do this.

94
00:06:00,040 --> 00:06:03,710
The pure recursion way which is not necessarily better.

95
00:06:04,000 --> 00:06:08,410
It's a little more confusing but it is all recursion.

96
00:06:08,410 --> 00:06:10,020
There is no helper method.

97
00:06:10,040 --> 00:06:13,000
It's a little shorter but we'll get there.

98
00:06:13,000 --> 00:06:14,050
That's coming up next.

99
00:06:14,050 --> 00:06:19,120
So Hulver method recursion is just a pattern where we have an outer function that's not recursive which

100
00:06:19,120 --> 00:06:22,140
calls an inner function which is recursive.

101
00:06:22,290 --> 00:06:22,640
OK.

102
00:06:22,750 --> 00:06:23,260
I'll be quite.

