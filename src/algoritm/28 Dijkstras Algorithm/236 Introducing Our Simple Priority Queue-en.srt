1
00:00:00,210 --> 00:00:00,810
All right.

2
00:00:00,810 --> 00:00:02,030
So let's give this a shot.

3
00:00:02,190 --> 00:00:04,420
But before we even talk but the pseudocode.

4
00:00:04,590 --> 00:00:08,820
Remember I don't know if you watched the early videos in this section but I talked about a priority

5
00:00:08,820 --> 00:00:11,350
queue and how that played a role in the algorithm.

6
00:00:11,670 --> 00:00:13,140
Here's where it comes in.

7
00:00:13,140 --> 00:00:19,320
When we talk about picking the smallest value here like if we go back I don't know like here where we

8
00:00:19,320 --> 00:00:21,860
had to pick the next smallest value.

9
00:00:21,870 --> 00:00:27,420
So we visited a C and B we need to look at the rest and figure out what where we go next.

10
00:00:27,470 --> 00:00:31,000
We had four for seven for e and 6 for f.

11
00:00:31,050 --> 00:00:33,760
So we chose D that's for.

12
00:00:33,810 --> 00:00:36,130
This is very easy to do with three nodes.

13
00:00:36,150 --> 00:00:41,250
But if we have a million that we're keeping track of finding the next smallest one to visit can take

14
00:00:41,250 --> 00:00:43,590
a lot of time if we're doing it naively.

15
00:00:43,950 --> 00:00:46,010
So I mean do two implementations.

16
00:00:46,140 --> 00:00:47,610
Here's the first version.

17
00:00:47,650 --> 00:00:53,000
Say hit the next through on my slides Here's our simple priority queue.

18
00:00:53,520 --> 00:00:58,470
And we're going to start here so that we don't get too distracted but this is going to give us the next

19
00:00:58,470 --> 00:01:01,820
node to visit and all that it does.

20
00:01:01,860 --> 00:01:02,920
It's just an array.

21
00:01:03,000 --> 00:01:09,150
And every time you add something to it you give it a priority and then we sort based off of that priority

22
00:01:09,360 --> 00:01:10,200
which is what happens here.

23
00:01:10,200 --> 00:01:15,530
So every time we insert we resort and then we remove from the array.

24
00:01:15,630 --> 00:01:20,970
So I've copied it over here to say you can see it and if we do something like I don't know how far Q

25
00:01:21,000 --> 00:01:24,660
equals new priority queue like this.

26
00:01:24,750 --> 00:01:30,550
And then I do queued up push when I push or actually it's technically it's called in queue.

27
00:01:31,020 --> 00:01:37,710
When we include something let's say just the node A or let's not do a let's say B which has a distance

28
00:01:37,710 --> 00:01:39,110
and Riskin a say of three.

29
00:01:39,120 --> 00:01:43,300
I don't think that's accurate that's the priority that we add in.

30
00:01:43,530 --> 00:01:48,980
And now we're also in queue C which has a distance of 5.

31
00:01:49,290 --> 00:01:52,780
Let's do D which has a distance of 2.

32
00:01:53,190 --> 00:01:55,980
And then also I don't know.

33
00:01:55,980 --> 00:01:59,340
Q says a distance of 20.

34
00:01:59,340 --> 00:02:06,510
Now if we look at Q Dot values you'll see that it's sorted now based off of that priority.

35
00:02:06,510 --> 00:02:09,820
So every time we insert something it resorts.

36
00:02:10,170 --> 00:02:18,740
So if I insert something again that's really small like in enqueue let's say P has a distance of 1.5

37
00:02:19,110 --> 00:02:20,870
that's going to jump to the very beginning.

38
00:02:21,060 --> 00:02:23,440
If we look at values again.

39
00:02:23,690 --> 00:02:24,190
Right.

40
00:02:24,200 --> 00:02:30,600
So every time we dequeue these are the two methods we'll be using sort is used internally and Q and

41
00:02:30,600 --> 00:02:31,380
dequeue.

42
00:02:31,490 --> 00:02:36,490
When I do a Q It's going to give me whatever has the lowest priority.

43
00:02:36,620 --> 00:02:38,450
We want the smallest item.

44
00:02:38,540 --> 00:02:44,920
So what we'll do in our pseudo code is just push in these values like going back here.

45
00:02:45,250 --> 00:02:50,520
But suppose ignore the fact that we visited all of these let's say all of these were in the queue.

46
00:02:50,660 --> 00:02:55,570
When we ask for when we dequeue we want whatever has the smallest distance from A.

47
00:02:55,580 --> 00:02:57,380
That's what we're prioritizing.

48
00:02:57,380 --> 00:02:59,060
So the priority queue is going to help us.

49
00:02:59,180 --> 00:03:04,790
And this is not the best implementation it's simple but remember back in the binary heap section if

50
00:03:04,790 --> 00:03:10,180
you watch that there's a better way a faster implementation for a priority queue using a heap.

51
00:03:10,190 --> 00:03:15,500
This right here because we're sorting every single time it's off and log in.

52
00:03:15,500 --> 00:03:20,660
Which is not ideal but it's simple so we're going with this and then we'll update our code to use the

53
00:03:20,660 --> 00:03:22,050
binary heap and a bit.

54
00:03:22,340 --> 00:03:22,790
OK.

55
00:03:22,970 --> 00:03:23,960
So one more time.

56
00:03:23,990 --> 00:03:27,830
Every time I dequeue it gets to me whatever the current smallest priority is.

57
00:03:27,950 --> 00:03:34,770
But if I insert something else Id again if that smallest I should get that next.

58
00:03:34,790 --> 00:03:36,910
So we'll take advantage of this in our code.

59
00:03:37,100 --> 00:03:37,620
OK.

60
00:03:37,970 --> 00:03:40,130
So that's the naive basic priority.

61
00:03:40,130 --> 00:03:46,030
Q The goal is just to always get the smallest value out first no matter what else is in there.

62
00:03:46,040 --> 00:03:47,790
Just give us the smallest thing first.

