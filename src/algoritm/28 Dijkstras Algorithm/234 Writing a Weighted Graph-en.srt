1
00:00:00,210 --> 00:00:00,630
All right.

2
00:00:00,630 --> 00:00:01,470
Welcome back.

3
00:00:01,470 --> 00:00:06,440
So what we need to do before we can actually find the shortest path in a graph between two points.

4
00:00:06,630 --> 00:00:12,190
We need to just assign values between those points so we can find any path short or long.

5
00:00:12,450 --> 00:00:15,130
And to do that it's not that hard.

6
00:00:15,480 --> 00:00:22,950
All we do when we add an edge instead of saying from A to B we just say from A to B comma 90 from B

7
00:00:22,950 --> 00:00:24,890
to C comma 13.

8
00:00:24,960 --> 00:00:31,950
So if we hop over to a quick little snippet we could just quickly redefine our class so we'll call it

9
00:00:31,950 --> 00:00:36,510
weighted graph and I'm only going to worry about adding a vertex and adding an edge.

10
00:00:36,510 --> 00:00:42,310
We won't worry about removing edges and vertices for now because let's just focus on the important stuff.

11
00:00:42,540 --> 00:00:46,550
So class weighted graph what are constructor.

12
00:00:46,590 --> 00:00:48,300
Exact same as an weighted graph.

13
00:00:48,300 --> 00:00:50,010
We have an adjacency list.

14
00:00:50,040 --> 00:00:55,980
The main difference though is once we're actually adding edges in what we had before looked something

15
00:00:55,980 --> 00:00:57,850
like this or we had like a.

16
00:00:58,080 --> 00:01:03,780
And then it just had an array where we had B and maybe C or something.

17
00:01:03,780 --> 00:01:09,930
That's not going to cut it for us because we now need to store not only the edge itself from A to B

18
00:01:09,970 --> 00:01:11,200
but the value.

19
00:01:11,280 --> 00:01:16,770
So it's going to look something more like this where we have a field or it's going to be an object and

20
00:01:16,770 --> 00:01:26,130
we'll have two properties node which to just say is B for example and then wait which will be 10 a number

21
00:01:26,730 --> 00:01:31,600
and then of course we would have the same thing on B where the node is a and the weight is 10.

22
00:01:31,650 --> 00:01:36,500
So instead of just simply the string B we now need to add in an object.

23
00:01:36,570 --> 00:01:41,250
But as far as the vertex if we had ADD vertex it's exactly the same.

24
00:01:41,310 --> 00:01:47,400
So I'd vertex just checks if the vertex is already in the adjacency list and if it's not then we added

25
00:01:47,400 --> 00:01:49,740
in and set it to be an empty array.

26
00:01:50,040 --> 00:01:51,160
So that's nice and easy.

27
00:01:51,180 --> 00:01:54,520
Now we can add in our vertex like a and b and c.

28
00:01:54,540 --> 00:02:03,240
Now to add the edge between two vertices need to accept two vertices so let's go with vertex 1 and Vertex

29
00:02:03,240 --> 00:02:05,530
2 and then await.

30
00:02:06,180 --> 00:02:12,270
And if we look at what we did for our weighted urch excuse me for unweighted graph from earlier in the

31
00:02:12,270 --> 00:02:12,780
course.

32
00:02:12,900 --> 00:02:19,560
If you look at adding an edge it's very simple we just do this stuff adjacency list of Vertex 1 push

33
00:02:19,680 --> 00:02:24,580
vertex to this adjacency list vertex to push vertex 1.

34
00:02:24,750 --> 00:02:30,760
So we'll have to change a couple of things because I use Virtex one instead of v v 1 but that's minor.

35
00:02:31,000 --> 00:02:31,250
OK.

36
00:02:31,260 --> 00:02:37,550
So vertex 1 for text 2 for text 2 but this won't work because we're not using weight.

37
00:02:37,740 --> 00:02:43,500
So remember we need to store an object inside of that adjacency lists inside this array we're pushing

38
00:02:43,500 --> 00:02:44,250
into.

39
00:02:44,400 --> 00:02:49,440
We're going to have an object where there's a property called node does not have to be called that but

40
00:02:49,530 --> 00:02:49,730
it could.

41
00:02:49,730 --> 00:02:51,420
You could call vertex view on it too.

42
00:02:51,560 --> 00:02:54,490
But let's go with node and then wait.

43
00:02:54,750 --> 00:03:00,030
And rather than doing this wait colon wait cause I want it to be called wait.

44
00:03:00,150 --> 00:03:07,110
And also the argument is wait we can do is just pass and wait here and it will do the exact same thing

45
00:03:07,680 --> 00:03:10,910
as part of I believe that was added in 2015.

46
00:03:11,010 --> 00:03:14,480
It may have been around before and I just didn't know about it.

47
00:03:14,640 --> 00:03:18,920
The same thing here and that's it.

48
00:03:18,920 --> 00:03:23,290
This should be our weighted graph class so see if it works.

49
00:03:23,290 --> 00:03:25,570
Of course I just executed the code.

50
00:03:25,570 --> 00:03:27,380
So let's make a variable called graph.

51
00:03:27,390 --> 00:03:37,300
It's a new way to graph and what to add Virtex first just say a and b and c.

52
00:03:37,760 --> 00:03:45,660
And now let's add an edge from A to B which is going to be I don't know nine.

53
00:03:46,210 --> 00:03:51,210
And then let's do a to see which will be five.

54
00:03:51,250 --> 00:03:51,970
Sure.

55
00:03:52,270 --> 00:03:58,620
And then let's do BTC which will be seven.

56
00:03:59,220 --> 00:03:59,590
OK.

57
00:03:59,650 --> 00:04:04,020
Now let's look at the adjacency list rather than just trusting that it works.

58
00:04:04,030 --> 00:04:10,690
So you've got a B and C and for each entry in the adjacency list we have an object with a node and a

59
00:04:10,690 --> 00:04:11,440
weight.

60
00:04:11,440 --> 00:04:15,930
So for example from a we can see there's a connection to be with the weight of nine.

61
00:04:16,210 --> 00:04:21,950
And if we look at B there is a connection to A with weight of nine from A to C.

62
00:04:22,240 --> 00:04:28,780
There's also an edge with way to five if we will see you there you are.

63
00:04:28,780 --> 00:04:30,890
We have a see way to 5.

64
00:04:31,120 --> 00:04:32,470
All right so this is all working.

65
00:04:32,590 --> 00:04:36,790
Like I said we don't need to worry about removing edges and removing vertices for now because we're

66
00:04:36,790 --> 00:04:41,140
focusing on the algorithm but it's extremely similar to what we saw before.

67
00:04:41,290 --> 00:04:45,840
Except now you just need to remove an object but otherwise it's very very similar.

68
00:04:46,040 --> 00:04:50,070
OK so now we have all the pieces in place to actually talk about the algorithm.

69
00:04:50,140 --> 00:04:52,400
Moving on to Dijkstra's and the next video.

70
00:04:52,630 --> 00:04:54,790
So this is our weighted graph class.

71
00:04:54,800 --> 00:05:00,580
Very very simple class might be confusing if you didn't watch any of the graph section.

72
00:05:00,580 --> 00:05:04,790
I should have mentioned that earlier in the video but I did say that early on in this section.

73
00:05:04,900 --> 00:05:06,610
So definitely go watch that.

74
00:05:06,610 --> 00:05:09,200
If you're confused about what I'm talking about here.

75
00:05:09,430 --> 00:05:12,340
All we did was add in a weight to each edge.

76
00:05:12,340 --> 00:05:14,610
So it's a connection from one vertex to another.

77
00:05:14,620 --> 00:05:17,090
Now with an associated value.

78
00:05:17,140 --> 00:05:17,320
All right.

79
00:05:17,320 --> 00:05:20,160
Next up we're going to walk through the basics of the algorithm.

