1
00:00:00,180 --> 00:00:00,690
All right.

2
00:00:00,690 --> 00:00:01,420
Welcome back.

3
00:00:01,560 --> 00:00:04,630
Let's quickly talk about building a q with an array.

4
00:00:04,710 --> 00:00:06,640
So this is the easy way.

5
00:00:06,690 --> 00:00:09,980
So we would really need to do is create a variable.

6
00:00:10,050 --> 00:00:10,830
I'll just call mine.

7
00:00:10,830 --> 00:00:16,870
Q Like the letter instead of Q You EUV think that you spell it.

8
00:00:16,890 --> 00:00:21,900
So it's an empty array and there's multiple there's at least two ways of doing this really.

9
00:00:22,170 --> 00:00:24,860
We can add to the beginning or add to the end.

10
00:00:24,900 --> 00:00:26,450
So let's just pick one.

11
00:00:26,550 --> 00:00:31,050
Let's say that we're going to start by adding to the end of the array so we could use push.

12
00:00:31,080 --> 00:00:31,730
Right.

13
00:00:31,770 --> 00:00:37,890
So let's push first and a couple more or less two seconds and surprise will do.

14
00:00:37,890 --> 00:00:39,000
Third.

15
00:00:39,030 --> 00:00:39,640
All right.

16
00:00:39,870 --> 00:00:41,580
So the array looks like this.

17
00:00:41,580 --> 00:00:48,720
So for this to work or operate as a true cue we need a way to remove first first second second and third

18
00:00:48,990 --> 00:00:49,770
third.

19
00:00:49,770 --> 00:00:51,320
So we want to remove from the beginning.

20
00:00:51,510 --> 00:00:56,760
So pop is not what we want if we were doing a stack then that would work.

21
00:00:56,760 --> 00:00:59,830
Instead we need to move from the beginning with shift.

22
00:01:00,510 --> 00:01:03,200
And we get first second and then third.

23
00:01:03,210 --> 00:01:08,000
So that's one way of creating a cue and it's super easy.

24
00:01:08,100 --> 00:01:08,910
Right.

25
00:01:09,090 --> 00:01:14,730
Of course one thing that's not great when we do this is if we had 10000 items in there that you'd have

26
00:01:14,730 --> 00:01:19,840
an index and removing from the beginning means that every single item is read indexed.

27
00:01:19,920 --> 00:01:25,770
So adding to the end of the array doesn't require reindexing anything just means indexing the new item

28
00:01:25,770 --> 00:01:29,550
at the very end but removing from the beginning shifts everything over.

29
00:01:29,550 --> 00:01:33,170
So what if we did this instead if we look at Q As empty.

30
00:01:33,360 --> 00:01:36,360
So let's do and shift let's add to the beginning.

31
00:01:36,570 --> 00:01:43,650
So we'll do first again and second and third.

32
00:01:43,680 --> 00:01:44,700
Very exciting.

33
00:01:45,000 --> 00:01:47,780
So if we look at Cue it now looks like this.

34
00:01:48,090 --> 00:01:54,370
And then to remove following the rules have a cue first in first out we would need to pop from the end

35
00:01:54,600 --> 00:01:57,100
so we get first second and third.

36
00:01:57,240 --> 00:02:00,810
So those two pairs we could do an shift combined with pop.

37
00:02:00,990 --> 00:02:08,640
Or we could do push combined with shift both are going to give us that desired cue functionality first

38
00:02:08,640 --> 00:02:10,050
in first out.

39
00:02:10,050 --> 00:02:13,010
However in the second case we think about how it's working.

40
00:02:13,110 --> 00:02:19,890
As we grow this ten thousand items if we're adding to the beginning every time we insert that means

41
00:02:19,950 --> 00:02:26,970
reindexing the entire queue which also is not good because that means shifting everything over you know

42
00:02:26,970 --> 00:02:29,810
giving a new index to if we have 10000 items.

43
00:02:29,850 --> 00:02:34,360
That means re-assigning every single item popping from the end works well.

44
00:02:34,560 --> 00:02:41,220
So unlike when we talked about stacks you could use push and pop to make a stack and you would never

45
00:02:41,220 --> 00:02:44,310
need to re-index the entire thing the entire array.

46
00:02:44,760 --> 00:02:48,080
Unlike that when we do a Q There's no way around it using an array.

47
00:02:48,120 --> 00:02:55,090
So it definitely makes sense to create your own Q class if you're really concerned about performance.

48
00:02:55,110 --> 00:03:01,470
Like I said I will be using an array to illustrate or to create a cue for us in some of the more complicated

49
00:03:01,500 --> 00:03:04,290
algorithms later on to keep my code short.

50
00:03:04,290 --> 00:03:10,310
But it's not ideal in the next video I'll show you how to use a linked list based Q to define our own

51
00:03:10,320 --> 00:03:15,000
Q class which will perform better than this but this technically is a cube.

52
00:03:15,060 --> 00:03:21,370
We have a way of adding and removing and a first in first out method way functionality.

53
00:03:21,400 --> 00:03:23,580
Anyway you can do it with an array.

54
00:03:23,610 --> 00:03:25,080
Next we'll do it from scratch.

