1
00:00:00,150 --> 00:00:01,200
All right we'll come back.

2
00:00:01,200 --> 00:00:07,020
So in this video we'll define our own Q data structure from scratch instead of using an array.

3
00:00:07,410 --> 00:00:12,140
And just like we did with the stack data structure it's going to be based off of a length list.

4
00:00:12,240 --> 00:00:17,070
So hopefully you made it through the singly linked list section and we go through this pretty quickly.

5
00:00:17,070 --> 00:00:22,010
So if you didn't watch that if you didn't understand that code some of this might be confusing.

6
00:00:22,050 --> 00:00:27,890
So I recommend to do that first step will have a q class a first and a last and a Size property.

7
00:00:27,900 --> 00:00:33,960
Just like with our stack and then a node class for each element in the queue will have a value and a

8
00:00:33,960 --> 00:00:35,760
next pointer.

9
00:00:35,760 --> 00:00:38,530
So quickly to refresh your memory on a linked list.

10
00:00:38,700 --> 00:00:40,570
What we could do just like with an array.

11
00:00:40,620 --> 00:00:43,290
We have two sort of pairs of options.

12
00:00:43,440 --> 00:00:50,700
We can add to the end and remove from the beginning or we could add to the beginning and removed from

13
00:00:50,700 --> 00:00:51,320
the end.

14
00:00:51,360 --> 00:00:51,600
Right.

15
00:00:51,600 --> 00:00:59,170
So we could for example if we let's do an insert at the very end insert 80.

16
00:00:59,280 --> 00:01:00,220
There we go.

17
00:01:00,450 --> 00:01:04,320
And we keep inserting this insert again 54.

18
00:01:04,680 --> 00:01:09,080
The first thing that should be removed is the first thing that was inserted in a cue.

19
00:01:09,120 --> 00:01:10,430
So that would be over here.

20
00:01:10,430 --> 00:01:14,100
So then we would remove from the beginning just like this.

21
00:01:14,100 --> 00:01:15,540
So that's one option.

22
00:01:15,540 --> 00:01:19,340
The other option is to switch it in at the beginning.

23
00:01:19,440 --> 00:01:28,290
So we'd insert at the beginning like ninety nine right there and then remove from the end which theoretically

24
00:01:28,290 --> 00:01:29,930
would be the first thing added in.

25
00:01:29,970 --> 00:01:36,330
Although in this case it isn't because you know we were doing it backwards but if we kept inserting

26
00:01:36,480 --> 00:01:39,390
the list it would grow or the stack grows this way.

27
00:01:39,390 --> 00:01:41,740
So this should be the first thing added in.

28
00:01:41,850 --> 00:01:44,900
And if I remove from there from the tail.

29
00:01:45,240 --> 00:01:46,000
Oh no.

30
00:01:46,020 --> 00:01:47,660
Look at how slow this is.

31
00:01:47,670 --> 00:01:53,870
So this is the exact same thing we encountered in the stack video where in a singly linked list removing

32
00:01:53,880 --> 00:01:59,650
from the very end using POP is slow because we have to iterate over the entire list.

33
00:01:59,790 --> 00:02:00,950
Let's do it one more time.

34
00:02:00,960 --> 00:02:02,370
Remove from the end.

35
00:02:02,520 --> 00:02:03,370
Not good.

36
00:02:03,720 --> 00:02:10,520
So what we're going to do instead of this is to add to the end and remove from the beginning.

37
00:02:11,330 --> 00:02:13,190
So it looks more like this.

38
00:02:13,400 --> 00:02:17,710
So our methods are going instead of push and pop which is what they are for a stack.

39
00:02:17,720 --> 00:02:20,210
The terminology is and Q and dequeue.

40
00:02:20,290 --> 00:02:22,370
So if this is our cue when we add.

41
00:02:22,410 --> 00:02:25,920
Now well I just clicked dequeue accidentally.

42
00:02:25,940 --> 00:02:27,670
So you could see it was removed from the beginning.

43
00:02:27,680 --> 00:02:30,930
But when we entered cue something it's added to the end.

44
00:02:31,040 --> 00:02:32,460
So it's pushed on.

45
00:02:32,540 --> 00:02:35,910
If we're going with a singly linked list we would call this push.

46
00:02:35,960 --> 00:02:37,370
We're adding to the end.

47
00:02:37,670 --> 00:02:42,650
And when we dequeue we're removing from the beginning which we would call shift.

48
00:02:42,860 --> 00:02:47,590
But because it's a cue we're going with and Q and dequeue.

49
00:02:47,660 --> 00:02:52,710
So this is our idea to singly linked list or it looks like one but it has these two methods.

50
00:02:52,730 --> 00:02:57,130
So we add to the end to the tail and we remove from the head.

51
00:02:57,230 --> 00:02:58,000
So let's do that.

52
00:02:58,010 --> 00:03:00,830
Now here's the classes that we'll go with.

53
00:03:00,830 --> 00:03:05,220
I'm going to start by defining those two classes and then we'll add the two methods.

54
00:03:05,240 --> 00:03:10,400
So I made a new snippet and I'll fast forward through my definition of the Node class.

55
00:03:10,460 --> 00:03:10,730
All right.

56
00:03:10,730 --> 00:03:13,200
So we have node takes evaluation.

57
00:03:13,250 --> 00:03:18,200
We set the value to be that value and then the next is null by default.

58
00:03:18,230 --> 00:03:25,050
Now quickly to find the basic skeleton of the Q class and it just has a constructor takes nothing.

59
00:03:25,310 --> 00:03:27,470
And we have a first which is no.

60
00:03:27,650 --> 00:03:32,190
We have a last which is no and then a size.

61
00:03:32,240 --> 00:03:35,030
And now we just have to add our two simple methods.

62
00:03:35,150 --> 00:03:38,720
So we'll have NQ which accepts a value.

63
00:03:38,810 --> 00:03:41,080
So I'll just call it Val.

64
00:03:41,450 --> 00:03:43,940
And then we have the Q which doesn't.

65
00:03:44,030 --> 00:03:46,010
I hate having to type that.

66
00:03:46,010 --> 00:03:48,410
I hope I say oh my gosh you see.

67
00:03:48,430 --> 00:03:49,680
You see.

68
00:03:49,700 --> 00:03:50,690
There you go.

69
00:03:50,780 --> 00:03:53,840
And this should return the first thing that was added in.

70
00:03:53,840 --> 00:03:55,100
So this should add something in.

71
00:03:55,160 --> 00:04:00,790
And then this will return and remove the the first thing that was added in.

72
00:04:00,870 --> 00:04:04,260
Not very good about not explaining it in a good way anyway.

73
00:04:04,370 --> 00:04:06,610
So this will add to the very end of our lengthy.

74
00:04:06,620 --> 00:04:08,710
This will remove from the beginning.

75
00:04:08,750 --> 00:04:10,360
So let's start by queuing.

76
00:04:10,460 --> 00:04:13,370
So if we look at the pseudo code our function accepts the value.

77
00:04:13,400 --> 00:04:14,330
We've done that.

78
00:04:14,480 --> 00:04:17,090
Create a new node using the value passed in.

79
00:04:17,540 --> 00:04:21,920
And then if there are no nodes in the queue set this node to be the first and last property.

80
00:04:21,920 --> 00:04:25,890
So that's not all of it but let's just start by creating the new node.

81
00:04:25,980 --> 00:04:35,610
So our new node equals new node with Val that was passed in cool and then we're going to check if there's

82
00:04:35,610 --> 00:04:36,970
nothing in the queue.

83
00:04:37,500 --> 00:04:44,040
So we could check if size is zero or if there is no this at first.

84
00:04:44,130 --> 00:04:49,010
In that case we set this up first equals new node.

85
00:04:49,400 --> 00:04:51,320
This last equals new nodes.

86
00:04:51,330 --> 00:04:52,530
This is our edge case.

87
00:04:52,770 --> 00:04:54,460
If it's an empty queue.

88
00:04:54,660 --> 00:04:57,890
So we set the first and last to be that new node.

89
00:04:58,320 --> 00:05:04,800
Otherwise set the next property on the current last to be the new node and then move the last pointer

90
00:05:04,890 --> 00:05:09,390
to be that new node at the end to basically add it to the end.

91
00:05:09,570 --> 00:05:16,930
So that looks like this else and this is identical other than first and last in size.

92
00:05:17,190 --> 00:05:20,700
You could replace that with push on our singly linked list.

93
00:05:20,700 --> 00:05:24,720
We're adding to the end we just used head and tail and length.

94
00:05:24,810 --> 00:05:26,640
So it's the same logic.

95
00:05:26,640 --> 00:05:29,380
So otherwise this last.

96
00:05:29,460 --> 00:05:33,530
So the very end next is now equal to new node.

97
00:05:33,780 --> 00:05:37,830
And then we just say this last equals that new node.

98
00:05:37,980 --> 00:05:40,600
So we've moved over that pointer.

99
00:05:40,620 --> 00:05:42,280
So we're now looking at the end.

100
00:05:42,570 --> 00:05:49,120
And then finally we're going to increment the size of the q by one and return that.

101
00:05:49,120 --> 00:05:53,310
So I'll do return plus plus size.

102
00:05:53,780 --> 00:05:54,590
OK.

103
00:05:55,060 --> 00:06:00,790
And then we'll move on to dequeue and dequeue should remove from the beginning in order to give us the

104
00:06:00,850 --> 00:06:03,630
last or excuse me to give us the first thing added in.

105
00:06:03,670 --> 00:06:06,130
We're adding to the end removing from the beginning.

106
00:06:06,340 --> 00:06:07,560
So Diekema looks like this.

107
00:06:07,570 --> 00:06:14,800
We define the function takes no arguments if there is no first property just return no store the first

108
00:06:14,800 --> 00:06:16,160
property in a variable.

109
00:06:16,170 --> 00:06:21,160
This is identical to what we did in the stacked section of the stack.

110
00:06:21,160 --> 00:06:23,030
Part of the section.

111
00:06:23,110 --> 00:06:25,000
So it's very very similar.

112
00:06:25,510 --> 00:06:27,760
And let's just get going on it honestly.

113
00:06:27,790 --> 00:06:32,080
So dequeue we're going to start by checking if it's empty.

114
00:06:32,080 --> 00:06:36,120
So if there is no this first return no.

115
00:06:36,160 --> 00:06:43,630
That means that there's nothing in our queue Otherwise we'll make a variable called temp to store the

116
00:06:43,630 --> 00:06:46,050
current stuff first.

117
00:06:46,090 --> 00:06:50,980
This is what will return at the very end and then we'll just do our exact same logic.

118
00:06:50,980 --> 00:07:02,170
So if this stuff first is equal to this last we're going to set this last equal to no otherwise was

119
00:07:02,350 --> 00:07:03,490
actually not even otherwise.

120
00:07:03,490 --> 00:07:05,710
But just this first.

121
00:07:05,830 --> 00:07:07,660
So that's our edge case.

122
00:07:07,660 --> 00:07:13,180
If you know there's only one thing left in there we set the last item to be no then we're going to take

123
00:07:13,180 --> 00:07:18,460
this out first at the beginning and update it to be the next item.

124
00:07:18,700 --> 00:07:24,770
So whatever used to be there for example if this is the current start first we're now going to say this

125
00:07:24,940 --> 00:07:32,080
first next is now this stuff first and then the only other thing we need to do is decrease the size

126
00:07:32,080 --> 00:07:35,020
by one and return the value of the node.

127
00:07:35,020 --> 00:07:42,430
So that's going to be this size minus minus and then return temp value.

128
00:07:43,480 --> 00:07:44,630
And that should be it.

129
00:07:44,710 --> 00:07:52,630
And if we look at this dequeue and compare it to our stack which had it was called pop but it's the

130
00:07:52,630 --> 00:07:57,340
same idea the code is identical.

131
00:07:57,480 --> 00:07:59,710
They even use variable named TEMP.

132
00:08:00,080 --> 00:08:00,860
Yeah.

133
00:08:01,200 --> 00:08:03,700
It should be exactly the same.

134
00:08:03,930 --> 00:08:05,420
And that's correct.

135
00:08:05,420 --> 00:08:08,280
That's how it should be the way that we're implementing our queue.

136
00:08:08,370 --> 00:08:11,750
We are removing from the beginning same thing we did with our stack.

137
00:08:11,790 --> 00:08:16,200
It's just that in our stack We are also adding to the beginning in our queue.

138
00:08:16,230 --> 00:08:22,500
We're adding to the end and we called it dequeue instead of pop and queue instead of push anyway.

139
00:08:22,830 --> 00:08:24,870
So let's test this baby out.

140
00:08:25,080 --> 00:08:26,100
So run our code.

141
00:08:26,130 --> 00:08:34,590
I don't know why I just let's run the code and let's make it Q Just call it new q like that and then

142
00:08:34,590 --> 00:08:42,010
we'll do an NQ first.

143
00:08:42,190 --> 00:08:43,610
What's going on here.

144
00:08:44,530 --> 00:08:47,670
It looks like ah I have a problem.

145
00:08:47,680 --> 00:08:51,580
Up first this outsized needs to be set to zero.

146
00:08:51,710 --> 00:08:58,780
So we'll do our Q equals new Q And then do Q and Q First.

147
00:08:58,980 --> 00:09:07,170
Looks like it's working second and third and then we'll do a Q dots dequeue which should give me the

148
00:09:07,170 --> 00:09:12,650
first thing added in which is first and then second then third and now it should always be No.

149
00:09:13,110 --> 00:09:16,210
And first and last are set to no size is back to zero.

150
00:09:16,380 --> 00:09:19,440
So I can now and q something else like hello.

151
00:09:19,440 --> 00:09:26,290
And then I can dequeue Hello again and everything should be happy and that is our cue.

152
00:09:26,700 --> 00:09:29,430
So this q can grow super large.

153
00:09:29,440 --> 00:09:35,460
Theres no indexing theres no problems that will encounter its constant time for every operation which

154
00:09:35,460 --> 00:09:37,750
is really just adding in and removing.

155
00:09:37,920 --> 00:09:44,490
And it is first in first out FIFO fight so I don't know what the official pronunciation is and that

156
00:09:44,490 --> 00:09:49,760
is in comparison to a stack which is lifeso or Laveau last in first out.

157
00:09:49,950 --> 00:09:54,660
So they're very similar but also extremely different in how they actually behave.

158
00:09:54,690 --> 00:09:59,590
They're similar in the fact that there's two operations adding and removing put something in.

159
00:09:59,610 --> 00:10:00,610
You get something out.

160
00:10:00,630 --> 00:10:03,010
It's just that the orders are totally different.

161
00:10:03,410 --> 00:10:06,200
OK so in the next video I'll wrap everything up.

162
00:10:06,290 --> 00:10:06,990
In queues.

163
00:10:06,990 --> 00:10:10,580
Talk about Big-O notation and just summarize it all.

164
00:10:10,590 --> 00:10:14,270
Hopefully this makes sense if you saw the singles links section.

165
00:10:14,280 --> 00:10:15,780
This is extremely similar.

166
00:10:15,780 --> 00:10:20,910
We just put a different wrapper on it called things a little bit different names but otherwise it's

167
00:10:20,910 --> 00:10:23,630
the same functionality just slimmed down.

168
00:10:23,670 --> 00:10:24,000
All right.

