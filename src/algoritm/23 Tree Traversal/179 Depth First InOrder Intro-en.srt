1
00:00:00,150 --> 00:00:00,840
Welcome back.

2
00:00:00,840 --> 00:00:03,700
So we have one more depth first search order to talk about.

3
00:00:03,750 --> 00:00:05,180
It's called in order.

4
00:00:05,250 --> 00:00:10,490
So if we go back to those three pieces three puzzle pieces we change the order of them.

5
00:00:10,650 --> 00:00:13,110
Then it changes the output entirely.

6
00:00:13,140 --> 00:00:15,430
So those three things are at some point.

7
00:00:15,480 --> 00:00:20,140
We actually visit the node then we traverse the entire left and we traverse the entire right.

8
00:00:20,310 --> 00:00:26,400
So within order we're going to traverse the entire left side then visit the node and then traverse the

9
00:00:26,400 --> 00:00:28,360
entire right side.

10
00:00:28,370 --> 00:00:33,050
So what that means is if we start with 10 we traversed the entire left.

11
00:00:33,050 --> 00:00:34,660
So that means going to 6.

12
00:00:34,920 --> 00:00:35,470
OK.

13
00:00:35,510 --> 00:00:39,290
So we traverse the entire Left or 6 meaning we hit 3.

14
00:00:39,320 --> 00:00:40,860
We visit three first.

15
00:00:40,860 --> 00:00:42,080
There's nothing to traverse.

16
00:00:42,200 --> 00:00:43,590
It's a leaf.

17
00:00:43,670 --> 00:00:49,040
Then we go to six and we visit six and then we traverse it right.

18
00:00:49,100 --> 00:00:49,770
We get to eight.

19
00:00:49,790 --> 00:00:53,750
There's nothing to traverse so we visit eight and it's added to the list.

20
00:00:54,470 --> 00:00:59,170
We go back to 10 so we did the entire left side of 10 traversed traverse.

21
00:00:59,180 --> 00:01:00,520
Now we visit 10.

22
00:01:00,680 --> 00:01:05,480
Now we traverse the right side and that adds 15 and then we visit 20.

23
00:01:05,480 --> 00:01:11,750
So this is the same pseudo code except that in our help or function we do the left side we traverse

24
00:01:11,750 --> 00:01:17,920
the left side recursively then we push the value of the node to a variable then we traverse the right.

25
00:01:18,020 --> 00:01:23,930
So the end goal just like all of our other traversal methods is to build a list or an array containing

26
00:01:23,930 --> 00:01:26,840
the values in the order that they were visited.

27
00:01:26,840 --> 00:01:28,060
Or you could just print them out.

28
00:01:28,070 --> 00:01:32,840
But I would do this so that you can see exactly what's happening it's easier to compare.

29
00:01:32,930 --> 00:01:35,320
If you just build an array or a list.

30
00:01:35,390 --> 00:01:41,180
So with this sample tree our output would be 3 6 8 10 15 20.

31
00:01:41,180 --> 00:01:47,210
So we do the left side visit the node then the right side just need to change a single line of code.

32
00:01:47,690 --> 00:01:49,570
And contrast that with preorder.

33
00:01:49,580 --> 00:01:55,490
Remember here we visit the node then the left then the right with post order we traverse all the way

34
00:01:55,490 --> 00:02:00,740
to the left all the way to the right and then we visit a node OK.

35
00:02:01,070 --> 00:02:06,890
So give us a shot if you have the code from the last two videos then just change that one line and you

36
00:02:06,890 --> 00:02:07,670
should be good to go.

