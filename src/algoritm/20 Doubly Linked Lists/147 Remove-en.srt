1
00:00:00,140 --> 00:00:03,690
All right next we have for move for a doubly linked list.

2
00:00:03,690 --> 00:00:06,570
So remove just takes in an index or position.

3
00:00:06,930 --> 00:00:14,280
And we're going to remove the item at that position just like before we can take advantage of get me

4
00:00:14,400 --> 00:00:19,140
restart this here we can take advantage of get which we already built in the functionality to check

5
00:00:19,140 --> 00:00:22,110
if something is closer to the head or the tail.

6
00:00:22,410 --> 00:00:26,150
So we don't have to write the logic to work from the from the end or from the beginning.

7
00:00:26,160 --> 00:00:31,140
We can take advantage of get but we still want that logic to be running because if we have a million

8
00:00:31,140 --> 00:00:36,840
items in here and we're trying to remove the second to last item or the fifth to last item it makes

9
00:00:36,840 --> 00:00:39,780
no sense to start at the beginning and go NEXT NEXT NEXT NEXT.

10
00:00:39,810 --> 00:00:44,310
All the way almost a million items down when we could start at the end and just go.

11
00:00:44,370 --> 00:00:47,500
Previous previous or however many times.

12
00:00:47,560 --> 00:00:49,530
So that's what we're going to do here.

13
00:00:49,770 --> 00:00:54,910
But of course we're not going to have to write most of the logic although we really have to do is first

14
00:00:54,930 --> 00:01:00,900
check if the index is invalid if it's less than zero or greater than or equal to the length return undefined

15
00:01:00,930 --> 00:01:02,850
or some false value.

16
00:01:03,270 --> 00:01:08,110
If the index is zero shift just take advantage of shift remove from the beginning.

17
00:01:09,170 --> 00:01:14,000
If the index is the same as the length minus one or if it's equal to the length minus one I don't know

18
00:01:14,000 --> 00:01:17,890
why I said it is the same as just use pop.

19
00:01:17,890 --> 00:01:23,960
Otherwise use the get method to retrieve the item to be removed so that retrieves the item then you

20
00:01:23,960 --> 00:01:27,930
have to update the next and previous properties to remove it correctly.

21
00:01:28,040 --> 00:01:29,690
We have to patch the hole.

22
00:01:29,720 --> 00:01:34,490
And then what I like to do is set the next and previous on the found note itself on the thing that you're

23
00:01:34,490 --> 00:01:35,540
removing.

24
00:01:35,540 --> 00:01:41,300
Just wipe those out so that when you return it it's just the value and next and previous on the returned

25
00:01:41,300 --> 00:01:42,840
item are no.

26
00:01:43,040 --> 00:01:48,530
And then subtract one from the length and returned return the removed node.

27
00:01:48,530 --> 00:01:57,010
So for example if we remove something from the middle let's say index of four we find it first using

28
00:01:57,020 --> 00:01:58,000
get.

29
00:01:58,540 --> 00:02:00,330
OK we found it.

30
00:02:00,470 --> 00:02:05,270
So we have to patch the thing before it and the thing after it to connections and then we remove the

31
00:02:05,270 --> 00:02:10,600
connections from here from the deleted item and then we return the deleted item.

32
00:02:11,140 --> 00:02:11,560
OK.

33
00:02:11,690 --> 00:02:18,080
So give this one a shot remove take advantage of the get method that we already wrote and you solution

34
00:02:18,110 --> 00:02:18,480
coming up.

