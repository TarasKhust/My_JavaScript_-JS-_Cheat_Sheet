1
00:00:00,240 --> 00:00:01,290
Hey welcome back.

2
00:00:01,290 --> 00:00:03,450
Time to actually write radix sort.

3
00:00:03,450 --> 00:00:08,210
So if we if you watched the video on the helper methods that's actually the harder stuff.

4
00:00:08,250 --> 00:00:13,020
Now we just call those helper methods a couple of times in the loop and we make the buckets.

5
00:00:13,020 --> 00:00:14,120
And that's kind of it.

6
00:00:14,280 --> 00:00:19,260
So here's the pseudo code if you want to add this yourself the Find function that accepts a list of

7
00:00:19,260 --> 00:00:24,600
numbers just call it radix sort something like that and then the first thing we have to do is figure

8
00:00:24,600 --> 00:00:27,200
out how many digits the largest number has.

9
00:00:27,450 --> 00:00:29,210
Well we just wrote that method.

10
00:00:29,340 --> 00:00:36,060
Most digits if we go back here we need to figure out which number has the largest number of digits or

11
00:00:36,090 --> 00:00:38,840
what is the largest number of digits in any of these numbers.

12
00:00:38,850 --> 00:00:41,120
And in this case it's four.

13
00:00:41,200 --> 00:00:44,230
There's a couple of four digit numbers with this more than a couple.

14
00:00:44,250 --> 00:00:50,130
So we're going to need to loop four times because we're going to need to sort them into buckets for

15
00:00:50,130 --> 00:00:51,710
this digit this digit.

16
00:00:51,840 --> 00:00:55,330
This digit this one and this one to four different times.

17
00:00:55,380 --> 00:00:58,110
If we had a six digit number we need to do it six times.

18
00:00:58,110 --> 00:01:04,230
So once you figure that out using the method we just defined back here then you need to start a loop

19
00:01:04,350 --> 00:01:07,910
from zero up until the largest number of digits.

20
00:01:07,950 --> 00:01:12,340
So for doing this four times we need to go from zero to 1 to 2 to 3.

21
00:01:12,660 --> 00:01:17,350
And each time through we're going to create buckets for each digit.

22
00:01:17,360 --> 00:01:20,200
Now a bucket is just an empty array.

23
00:01:20,220 --> 00:01:24,590
So we'll have an array that has 10 Subba race.

24
00:01:24,600 --> 00:01:26,000
That's how I would do it.

25
00:01:26,040 --> 00:01:27,600
And there they all start empty.

26
00:01:27,600 --> 00:01:31,740
So index 0 of this array starts as an empty array index one is an empty array.

27
00:01:32,040 --> 00:01:38,280
And then each time through this loop we're going to take each number put it in the correct bucket based

28
00:01:38,280 --> 00:01:38,910
off of it.

29
00:01:38,960 --> 00:01:39,870
It's OK.

30
00:01:39,930 --> 00:01:43,150
That's a really difficult thing to say it's case digit.

31
00:01:43,620 --> 00:01:47,010
Meaning that whatever this loop is we start at zero.

32
00:01:47,190 --> 00:01:52,980
We're going to put it in each number in the correct spot correct bucket slot using the zero with digit.

33
00:01:53,010 --> 00:01:55,620
And then the first digit the second digit.

34
00:01:55,620 --> 00:02:01,240
So if we go here right if we run sort go first thing we do.

35
00:02:01,690 --> 00:02:03,070
So we make these buckets.

36
00:02:03,330 --> 00:02:04,860
Here's our 10 buckets.

37
00:02:04,860 --> 00:02:09,890
Each one of these is an array inside of one larger array with 10 slots.

38
00:02:09,990 --> 00:02:11,430
And this is index 0.

39
00:02:11,430 --> 00:02:13,360
This is index 1 index too.

40
00:02:13,410 --> 00:02:16,560
So all that we do for any number which one is next.

41
00:02:16,560 --> 00:02:17,400
All right.

42
00:02:17,400 --> 00:02:22,930
So when we take the 0 with number which also happens to be zero.

43
00:02:22,980 --> 00:02:29,340
So we take this number and put it in the slot zero index zero and we keep going.

44
00:02:29,340 --> 00:02:33,960
So here we go we take the zero with Number of this we already wrote a helper method to do that.

45
00:02:34,020 --> 00:02:38,830
We call that what we call it digit get digit something like that.

46
00:02:38,910 --> 00:02:42,720
So get digit index 0 is going to give us 7.

47
00:02:42,750 --> 00:02:45,210
So we put the whole number in slot 7.

48
00:02:45,300 --> 00:02:46,550
So we keep going with that.

49
00:02:46,800 --> 00:02:53,010
And then the next time through our loop we're going to look at index of one and then index of two index

50
00:02:53,010 --> 00:02:53,830
of three.

51
00:02:54,210 --> 00:02:59,510
And then the other thing we have to do is replace our existing array with the values in the buckets.

52
00:02:59,510 --> 00:03:03,360
So this is where we reorder them a bit a bit.

53
00:03:03,360 --> 00:03:10,880
So in this example you know we put them all in the correct buckets can speed this up a little bit.

54
00:03:11,010 --> 00:03:16,910
And then at this point we reformed them into almost using the order that they're currently in.

55
00:03:17,280 --> 00:03:18,240
And there's an easy way.

56
00:03:18,240 --> 00:03:19,810
There's a couple of easy ways of doing that.

57
00:03:20,040 --> 00:03:22,740
You don't have to loop through manually and do this.

58
00:03:22,860 --> 00:03:29,370
I would just concatenate into a new array and so we just keep that order and then we start the process

59
00:03:29,400 --> 00:03:30,150
over.

60
00:03:30,570 --> 00:03:32,010
So there's going to be two loops.

61
00:03:32,010 --> 00:03:35,080
There's the outer loop which happens four times.

62
00:03:35,160 --> 00:03:40,620
So we're looking at digit 1 or 0 and all the numbers digit 1 and all the numbers 2 3 and the numbers

63
00:03:40,920 --> 00:03:45,510
and then we need an inner loop to actually do something to each number in the list.

64
00:03:45,900 --> 00:03:46,750
OK.

65
00:03:47,160 --> 00:03:49,240
And then at the very end return not list.

66
00:03:49,500 --> 00:03:51,960
So I'm going to implement this in the next video.

67
00:03:52,110 --> 00:03:54,610
Totally fine if this one is a little challenging.

68
00:03:54,660 --> 00:03:56,460
I mean it's always fun.

69
00:03:56,550 --> 00:04:02,490
It's not my place to say that but this is one that I think if you look at the code itself the solution

70
00:04:02,760 --> 00:04:09,720
ignoring the actual math from the last video about finding the digits and the log 10 and dealing with

71
00:04:10,390 --> 00:04:16,890
it you know Maggiolo and all that stuff the logic in the sorting function itself is relatively straightforward.

72
00:04:17,130 --> 00:04:18,420
So we'll do that in the next video.

