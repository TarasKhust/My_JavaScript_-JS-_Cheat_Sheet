1
00:00:00,230 --> 00:00:05,670
All right now that we have a basic understanding of Radix Sort Conceptually we need to implement a couple

2
00:00:05,670 --> 00:00:11,370
of helper methods so that we can actually write the main algorithm and the first one that we have to

3
00:00:11,370 --> 00:00:14,900
do is called Get digit or something like this.

4
00:00:14,970 --> 00:00:20,730
That takes a number and a position and returns the digit at that position.

5
00:00:20,730 --> 00:00:27,360
So we might have one two three four five if we called Get digit one two three four five with one as

6
00:00:27,360 --> 00:00:30,320
the position that should give us this number.

7
00:00:30,450 --> 00:00:34,100
So this is the zero position the one to three to four.

8
00:00:34,350 --> 00:00:37,140
So it's not you know a string or an array.

9
00:00:37,140 --> 00:00:39,590
We start to zero over here.

10
00:00:39,600 --> 00:00:40,940
We move to the right.

11
00:00:40,950 --> 00:00:47,960
This is going the other direction and get digit is really important for sorting things into these buckets.

12
00:00:48,170 --> 00:00:48,390
Right.

13
00:00:48,390 --> 00:00:54,200
If we have we're starting the very first pass on this list we need to take a look at this digit the

14
00:00:54,220 --> 00:00:58,640
zero digit in our example and put things in the correct spot.

15
00:00:58,890 --> 00:01:01,820
Then the next time through we need to look at this digit.

16
00:01:01,980 --> 00:01:04,770
So we need a method that will give us that digit.

17
00:01:04,770 --> 00:01:08,220
And unfortunately there's no easy way of doing that.

18
00:01:08,220 --> 00:01:10,420
Out of the box we need to write a method.

19
00:01:10,470 --> 00:01:14,820
So if you want to do this on your own rather than breaking this up into three different videos for the

20
00:01:14,820 --> 00:01:18,810
three methods I'm going to show I think I'm just going to combine them into one.

21
00:01:18,810 --> 00:01:21,140
I know that I'm going to combine them into one.

22
00:01:21,150 --> 00:01:22,330
I'm already recording it.

23
00:01:22,350 --> 00:01:28,130
The focus is not about this logic the focus is on the sorting logic of radix sort.

24
00:01:28,140 --> 00:01:34,430
But anyway if you do want to try these POS video and do it now two strategies you can do.

25
00:01:34,440 --> 00:01:41,280
You can convert to a string and then use the correct index to access the number you want and then convert

26
00:01:41,280 --> 00:01:42,480
it back to a number.

27
00:01:42,480 --> 00:01:47,530
The only problem is that as I already mentioned the strings are index from the left side.

28
00:01:47,580 --> 00:01:53,040
So if somebody asks for position zero of this if you convert to a string and you get zero.

29
00:01:53,190 --> 00:01:55,540
Well that's going to be the complete wrong side.

30
00:01:55,710 --> 00:02:00,750
So you could do some math so that you can convert you know working backwards using negative indices

31
00:02:00,750 --> 00:02:01,740
or something like that.

32
00:02:01,830 --> 00:02:05,350
Then come back to a string or you can do some math.

33
00:02:05,370 --> 00:02:08,570
So this should only work with base 10 numbers by the way.

34
00:02:08,730 --> 00:02:11,520
You don't have to make it work for binary.

35
00:02:11,550 --> 00:02:13,190
We don't need you know a user.

36
00:02:13,260 --> 00:02:16,650
If we were doing other bases a user could pass in what base.

37
00:02:16,830 --> 00:02:19,080
But assume base 10 numbers.

38
00:02:19,080 --> 00:02:24,050
So there's some math you can do each one of these positions represents a power of 10.

39
00:02:24,300 --> 00:02:31,050
This is the 10 to zero position tend to the first 10 to the second which the way I learned it in school

40
00:02:31,050 --> 00:02:33,070
was not tend to the second tend to the third.

41
00:02:33,150 --> 00:02:36,520
It was the one place the tens place the hundreds place.

42
00:02:36,720 --> 00:02:42,270
So what you can do is divide by that power of 10 and then do some other math which I'll show you in

43
00:02:42,270 --> 00:02:43,850
just a second to get the answer.

44
00:02:44,040 --> 00:02:44,370
OK.

45
00:02:44,370 --> 00:02:49,960
So if you want to implement it on your own posit Otherwise here's a spoiler here's a solution.

46
00:02:49,980 --> 00:02:54,080
I just took this from Stack Overflow and it's called Get digit.

47
00:02:54,150 --> 00:02:55,980
It satisfies our requirements.

48
00:02:55,980 --> 00:02:58,310
Let me show you how it works.

49
00:02:58,350 --> 00:03:01,940
Let's say we're taking a look at a number like 73.

50
00:03:02,100 --> 00:03:03,570
Sure that number.

51
00:03:03,960 --> 00:03:11,010
And if we pass in so if we did get digit of that and I'm looking for whatever number is in this position

52
00:03:11,340 --> 00:03:19,330
0 1 2 so I'd pass into the math is that this number here is 300 right.

53
00:03:19,370 --> 00:03:20,120
It's a three.

54
00:03:20,130 --> 00:03:22,940
But in the context of this it's a 300.

55
00:03:22,980 --> 00:03:31,530
So we're going to divide by 100 as you can see here math power 10 to the eye so tend to the second which

56
00:03:31,530 --> 00:03:36,890
is I gives us 100 so we're going to divide this whole number by 100.

57
00:03:36,960 --> 00:03:38,110
So I'll write this out here.

58
00:03:38,160 --> 00:03:41,090
We can ignore the math that apse the value just for a second.

59
00:03:41,220 --> 00:03:43,620
That's just so that this works with negative numbers.

60
00:03:43,620 --> 00:03:47,280
If I passed in in a negative number this should still be three.

61
00:03:47,310 --> 00:03:48,990
We don't want to get negative for three.

62
00:03:48,990 --> 00:03:51,190
This is just three is a digit we won.

63
00:03:51,360 --> 00:03:53,800
So that's what the math of the absolute value is.

64
00:03:53,850 --> 00:04:00,360
So we'll ignore that if we take this number and we divide by 100 which is what this is right here.

65
00:04:00,360 --> 00:04:03,260
And then we floor it down here.

66
00:04:03,420 --> 00:04:07,990
So we get seventy three point two three if we do a floor we just get 73.

67
00:04:08,220 --> 00:04:08,480
OK.

68
00:04:08,490 --> 00:04:11,660
So then we have 73 maade 10.

69
00:04:11,670 --> 00:04:13,650
So we divide 10 into there.

70
00:04:13,650 --> 00:04:15,320
How many times does it go in.

71
00:04:15,320 --> 00:04:16,070
It doesn't really matter.

72
00:04:16,090 --> 00:04:17,550
But it goes in seven times.

73
00:04:17,640 --> 00:04:20,180
So we get 70 What's the remainder.

74
00:04:20,280 --> 00:04:22,390
Well the remainder is three.

75
00:04:22,440 --> 00:04:25,310
So if we do mod 10 we get three.

76
00:04:25,320 --> 00:04:26,930
And that's what we're looking for.

77
00:04:27,300 --> 00:04:31,920
So we divide by the place the hundreds place.

78
00:04:31,950 --> 00:04:35,540
Then we floor to get rid of the decimal then we mod 10.

79
00:04:35,910 --> 00:04:37,070
And that's the math.

80
00:04:37,080 --> 00:04:38,960
So just to prove that it works.

81
00:04:39,450 --> 00:04:42,260
Run the code and then let's pass it in zero.

82
00:04:42,480 --> 00:04:45,020
We get the correct digit also with 3 1.

83
00:04:45,020 --> 00:04:47,240
What you get 2 three we get to 7.

84
00:04:47,460 --> 00:04:50,290
And if we pass in something that's not in there we get zero.

85
00:04:50,460 --> 00:04:51,240
Perfect.

86
00:04:51,240 --> 00:04:52,870
So this works we're all good.

87
00:04:53,070 --> 00:04:57,850
The next helper we need has to do with figuring out how many digits are in a number.

88
00:04:57,900 --> 00:05:05,590
And the reason we need that if we go back here is in this example we need to know how many times we

89
00:05:05,590 --> 00:05:11,100
need to sort things into buckets how many times do we have to you know reorder everything.

90
00:05:11,350 --> 00:05:13,250
And the answer is four.

91
00:05:13,270 --> 00:05:16,380
Because the largest number we have has four digits.

92
00:05:16,510 --> 00:05:20,410
So that's you know that's our bound if we have one 10 digit number in here.

93
00:05:20,530 --> 00:05:22,330
Then we need to do it 10 times.

94
00:05:22,420 --> 00:05:27,010
So we need to write code to figure out how many times we need to run it for a given list of numbers

95
00:05:27,490 --> 00:05:33,090
and all that we need to do is figure out which number has the largest or has the most number of digits.

96
00:05:33,520 --> 00:05:35,550
So there's two methods will right.

97
00:05:35,740 --> 00:05:42,520
The first one will give us Digic count for a single number and then the second one will use Digic count

98
00:05:42,670 --> 00:05:46,340
to figure out the largest number of digits for the entire list.

99
00:05:46,540 --> 00:05:50,750
So we'll have you know Max digits which calls digit count.

100
00:05:50,860 --> 00:05:54,920
So Digic count just you pass passing a base 10 number and it should return to you.

101
00:05:55,120 --> 00:05:56,780
How many digits are in there.

102
00:05:57,070 --> 00:05:58,720
So this would give us three digits.

103
00:05:58,750 --> 00:05:59,770
This is a two digit number.

104
00:05:59,770 --> 00:06:01,200
This is a one digit number.

105
00:06:01,330 --> 00:06:08,170
You could do this as a string converted to a string find the length or you could do some math which

106
00:06:08,170 --> 00:06:09,190
is what I'm going to do.

107
00:06:09,400 --> 00:06:14,800
So posit if you want to try and implement this on your own very loud motorcycle upside.

108
00:06:15,100 --> 00:06:17,430
Otherwise here's a solution.

109
00:06:17,860 --> 00:06:19,440
All right I copy this solution over.

110
00:06:19,450 --> 00:06:20,590
It's called Digic count.

111
00:06:20,920 --> 00:06:23,680
And there's a couple of things we'll talk about here.

112
00:06:23,680 --> 00:06:26,050
So first things first log 10.

113
00:06:26,050 --> 00:06:29,380
This is the log base 10 which what that does.

114
00:06:29,380 --> 00:06:35,860
If you didn't watch the log video early on in the course it's basically asking ten to what power gives

115
00:06:35,860 --> 00:06:37,160
us this number.

116
00:06:37,360 --> 00:06:40,820
So if I called Digic count on I don't know.

117
00:06:40,840 --> 00:06:43,490
Let's do 423.

118
00:06:43,750 --> 00:06:46,470
To what power gives us 423.

119
00:06:46,540 --> 00:06:48,330
Well it's not going to be a nice clean number.

120
00:06:48,460 --> 00:06:50,110
So that's why we do the floor.

121
00:06:50,260 --> 00:06:52,090
But let's do math.

122
00:06:52,180 --> 00:06:57,530
Log 10 of 4:23 gives us this.

123
00:06:57,640 --> 00:07:02,610
And when we floor that we get two because we're just getting rid of that.

124
00:07:02,620 --> 00:07:08,770
So our answer here was two and we're close.

125
00:07:08,800 --> 00:07:14,070
Except that we need to count the number of digits which we need to add one in.

126
00:07:14,170 --> 00:07:15,040
So we get three.

127
00:07:15,040 --> 00:07:18,830
So just one more example if we have a larger number like this.

128
00:07:19,150 --> 00:07:19,970
OK.

129
00:07:20,470 --> 00:07:24,370
We're doing math at absolute value again because we want it to work with negative numbers.

130
00:07:24,370 --> 00:07:30,100
If somebody passes in negative this number still has the same number of digits we don't we're not going

131
00:07:30,100 --> 00:07:31,780
to worry about negative numbers for our sort.

132
00:07:31,780 --> 00:07:36,860
But these are from Stack Overflow and it's always good to be conscientious of that.

133
00:07:36,880 --> 00:07:46,990
So if we take this number and we do math don't log 10 of that and then we floor that we get four and

134
00:07:46,990 --> 00:07:48,780
we add one which is five.

135
00:07:48,790 --> 00:07:49,810
That's how many digits are here.

136
00:07:49,810 --> 00:07:51,570
One two three four five.

137
00:07:51,880 --> 00:07:52,370
OK.

138
00:07:52,540 --> 00:07:55,760
So if the math is crazy to you don't worry it works.

139
00:07:55,810 --> 00:08:00,820
And this is something I feel like it's totally normal to just take this from Stack Overflow and add

140
00:08:00,820 --> 00:08:03,000
this to your code if you really need it.

141
00:08:03,010 --> 00:08:04,270
So did it count.

142
00:08:04,270 --> 00:08:06,910
The only special case is if number is 0.

143
00:08:06,940 --> 00:08:09,260
So if somebody passes in well not there.

144
00:08:09,340 --> 00:08:12,940
But if we did this this is a one digit number.

145
00:08:13,150 --> 00:08:22,460
But the problem is that if you try and do your math out log 10 of 0 you get negative infinity.

146
00:08:22,450 --> 00:08:23,270
That's not what we want.

147
00:08:23,320 --> 00:08:25,130
So we have to add this special case.

148
00:08:25,470 --> 00:08:25,950
OK.

149
00:08:26,050 --> 00:08:27,280
That's Digic count.

150
00:08:27,280 --> 00:08:32,050
And then our last method we need is called most digits.

151
00:08:32,080 --> 00:08:38,010
And this will take a list of numbers and just tell us which number has the most digits in it using Digic

152
00:08:38,010 --> 00:08:42,050
count I mean it should use Digic count because we just wrote it.

153
00:08:42,160 --> 00:08:44,440
I guess you could just do it again.

154
00:08:44,950 --> 00:08:51,850
So what I would do is take Digic count and run it on each number in this list and then keep a running

155
00:08:51,850 --> 00:08:57,790
tally of what the maximum is and just return that number so you don't even have to return which number

156
00:08:57,790 --> 00:09:01,360
itself had the most digits just the count.

157
00:09:01,360 --> 00:09:07,060
So for example in this list it would return five because this is the largest number it has five digits

158
00:09:07,410 --> 00:09:08,020
in this list.

159
00:09:08,020 --> 00:09:11,680
It returns to all the numbers have two digit digits.

160
00:09:11,680 --> 00:09:16,080
So this one's the easiest I think because we already have this code.

161
00:09:16,210 --> 00:09:21,470
If you just want to copy it the focus again is not on actually writing needs yourself but I just want

162
00:09:21,470 --> 00:09:22,520
to walk through them.

163
00:09:22,560 --> 00:09:31,150
So most digits Here's my solution looks like this I'll copy it over and it just takes a list of numbers

164
00:09:32,350 --> 00:09:35,130
and we start a max variable Max digits.

165
00:09:35,140 --> 00:09:36,310
It starts at zero.

166
00:09:36,430 --> 00:09:42,490
And then I loop through Gnome's and amusing math max which if you're not familiar with it you just pass

167
00:09:42,490 --> 00:09:43,450
in two numbers.

168
00:09:43,450 --> 00:09:48,350
If I do zero and 12 it's always going to give me a larger number.

169
00:09:49,280 --> 00:09:57,940
And so this allows me to instead of doing like an IF statement if x is larger than my current max then

170
00:09:57,940 --> 00:10:04,100
reassign the current max I'm just setting Max digits to equal the maximum between the current value

171
00:10:04,100 --> 00:10:07,700
of Max digits and Digic count of numbers.

172
00:10:08,010 --> 00:10:09,110
So for each number.

173
00:10:09,230 --> 00:10:15,770
So if I do most digits of that see 23

174
00:10:18,600 --> 00:10:22,970
OK this at the beginning Max digits will be zero.

175
00:10:23,030 --> 00:10:27,970
And then it loops through and it becomes two because the largest number we've seen so far has two digits.

176
00:10:28,070 --> 00:10:34,070
But the next time through three next time through it's still three then it's whatever this is and it

177
00:10:34,070 --> 00:10:35,360
stays at that.

178
00:10:35,360 --> 00:10:40,640
So let's run this and I get eight because this number presumably has eight digits.

179
00:10:40,640 --> 00:10:43,610
It does just count 8 digits.

180
00:10:43,610 --> 00:10:44,180
OK.

181
00:10:44,300 --> 00:10:46,810
So these are the helpers we need.

182
00:10:46,820 --> 00:10:51,770
And now we can actually implement in the next video we can implement our radix sort using these.

183
00:10:51,980 --> 00:10:54,710
And the logic isn't that bad once we have these done.

184
00:10:54,890 --> 00:10:58,430
You don't have to worry about recursion or any sort of crazy logic.

185
00:10:58,550 --> 00:11:04,370
We basically just loop over and put things into buckets and then join them together and do that x number

186
00:11:04,370 --> 00:11:08,330
of times where X is the number with the most digits.

187
00:11:08,350 --> 00:11:08,970
OK.

188
00:11:09,200 --> 00:11:09,680
See you then.

