1
00:00:00,180 --> 00:00:06,690
Welcome back all of the sorts that we've seen so far our groups together in a group called comparison

2
00:00:06,720 --> 00:00:07,940
sorting algorithms.

3
00:00:08,130 --> 00:00:13,050
All that means is that whether we're talking about bubble sort or something more advanced like quicksort

4
00:00:13,650 --> 00:00:19,710
at the end of the day beneath the surface the base comparison that we're doing is between two items

5
00:00:19,710 --> 00:00:20,910
at any given point.

6
00:00:21,210 --> 00:00:25,290
So we have one item on the left let's say and another on the right and we're deciding which one comes

7
00:00:25,290 --> 00:00:28,340
first or which one comes second depending on how we're sorting.

8
00:00:28,440 --> 00:00:31,690
So comparison sort just means we're comparing two things.

9
00:00:31,920 --> 00:00:34,640
That's the most we ever compare at a given time.

10
00:00:34,800 --> 00:00:39,770
We're doing less then versus greater then and then we're deciding where that one item goes.

11
00:00:39,780 --> 00:00:45,230
So when we talk about average time complexity for something like bubble sort of squared.

12
00:00:45,240 --> 00:00:47,810
Same for insertion and selection sort.

13
00:00:47,970 --> 00:00:53,010
Then we saw a slight and well more than slight improvement we saw a pretty big improvement with quicksort

14
00:00:53,520 --> 00:00:58,260
and merge sort which had average time complexity of 0 of end log in.

15
00:00:58,260 --> 00:01:01,130
So the question is are there faster sorting algorithms.

16
00:01:01,140 --> 00:01:03,900
Can we improve upon of and log it.

17
00:01:03,900 --> 00:01:05,210
Can we do better.

18
00:01:05,280 --> 00:01:11,510
And the answer is sort of answers yes we can but not by making comparisons.

19
00:01:11,640 --> 00:01:17,940
So mathematically there is a lower bound an asymptote for our average time complexity in a comparison

20
00:01:17,940 --> 00:01:18,680
sort.

21
00:01:18,730 --> 00:01:23,700
So no matter what the actual comparison algorithm is with the sorting algorithm is quicksort.

22
00:01:23,700 --> 00:01:29,350
Heapsort shell sort any of the ones we've seen cocktail shaker sort haven't heard of that one.

23
00:01:29,370 --> 00:01:30,120
All of these.

24
00:01:30,150 --> 00:01:30,870
Well not all of them.

25
00:01:30,870 --> 00:01:33,390
Some of them are slower like we saw with bubble sort.

26
00:01:33,510 --> 00:01:41,890
But the best average case time complexity that we can ever hope for in any comparison sort is an log.

27
00:01:41,930 --> 00:01:47,490
And if you want to learn more about the reason for it you can read this wikipedia article it goes into

28
00:01:47,490 --> 00:01:52,100
a little bit of a proof down here that explains how it how it how we arrived there.

29
00:01:52,170 --> 00:01:55,920
It all has to do with the limited information that we can gain from a single comparison.

30
00:01:55,920 --> 00:01:58,970
There is a mathematical bound to that anyway.

31
00:01:59,340 --> 00:02:06,090
That's not really the focus here because we have a solution we have a way around this but only in certain

32
00:02:06,090 --> 00:02:06,900
cases.

33
00:02:06,930 --> 00:02:12,300
So there are other types of sorting out rhythms that are not comparison algorithms and these algorithms

34
00:02:12,450 --> 00:02:15,380
take advantage of special properties of the data.

35
00:02:15,390 --> 00:02:21,030
For example there is a group of sorts called integer sorting algorithms and they only work with integers

36
00:02:21,030 --> 00:02:24,860
with numbers and we don't actually make direct comparisons.

37
00:02:24,960 --> 00:02:27,720
So one of those is radix sort.

38
00:02:27,750 --> 00:02:32,820
So when I say that we don't make direct comparisons I mean we're never actually comparing is this number

39
00:02:32,820 --> 00:02:35,400
less than this number is this number greater than this number.

40
00:02:35,520 --> 00:02:38,180
So we end up sorting the data in a different way.

41
00:02:38,250 --> 00:02:44,280
So radix sort is kind of fun and it's very different than anything we've done so far because we're not

42
00:02:44,280 --> 00:02:45,370
making comparisons.

43
00:02:45,390 --> 00:02:47,510
So let's talk about how it works.

44
00:02:47,520 --> 00:02:52,690
So I mentioned it's a special sorting algorithm that doesn't make comparisons and it works on numbers.

45
00:02:52,710 --> 00:02:58,650
So usually when this is actually used it's used with binary numbers and the number can be expressed

46
00:02:58,650 --> 00:02:59,680
in binary.

47
00:02:59,730 --> 00:03:04,800
Also you could take any strings or images if you wanted to and convert them to binary.

48
00:03:04,830 --> 00:03:09,630
So it's possible to sort other data but the actual data we work with at the time that we're sorting

49
00:03:09,630 --> 00:03:11,460
it needs to be numbers.

50
00:03:11,760 --> 00:03:16,250
And we're going to work with base 10 numbers like 950 or 17.

51
00:03:16,920 --> 00:03:22,340
So never makes comparisons between two elements that nevers asks what's smaller what's larger.

52
00:03:22,620 --> 00:03:28,170
Instead it exploits the fact that information about the size of a number is encoded in the number of

53
00:03:28,170 --> 00:03:28,950
digits.

54
00:03:28,950 --> 00:03:35,670
What I mean by that is that if a number has more digits but say a four digit number it's larger than

55
00:03:35,760 --> 00:03:38,910
any two digit number it doesn't matter what the two numbers are.

56
00:03:38,910 --> 00:03:44,070
We're not comparing the two numbers but we know that something with more digits is larger than something

57
00:03:44,070 --> 00:03:45,480
with fewer digits.

58
00:03:45,480 --> 00:03:47,300
So here's actually how it works.

59
00:03:47,340 --> 00:03:51,260
We actually take a list of numbers let's say this is what we're trying to sort.

60
00:03:51,570 --> 00:03:53,280
We have some numbers that are 1 digit.

61
00:03:53,280 --> 00:04:00,060
These are all based 10 to digits three digits four digits and we create 10 different buckets and these

62
00:04:00,060 --> 00:04:04,940
buckets represent all of the possible numbers the one digit numbers in base ten.

63
00:04:05,040 --> 00:04:06,160
So 0 through 9.

64
00:04:06,360 --> 00:04:11,800
So for every spot in a number it could be 0 1 or 2 all the way up to a 9.

65
00:04:12,120 --> 00:04:18,360
And what we do is we go through the entire list of our numbers and we start by looking at this digit.

66
00:04:18,570 --> 00:04:22,790
So the first digit in the number from the right side.

67
00:04:22,830 --> 00:04:31,830
So 6 4 6 3 8 OK and we group them into buckets based off of that number.

68
00:04:32,340 --> 00:04:39,060
So you'll see all numbers that have a two in the rightmost position go in the two bucket all numbers

69
00:04:39,060 --> 00:04:41,320
with a six in the rightmost position.

70
00:04:41,430 --> 00:04:46,980
Whether they're two digits 100 digits it's just that we're looking at the rightmost digit.

71
00:04:46,980 --> 00:04:48,540
We group them together here.

72
00:04:48,570 --> 00:04:51,150
So we're not sorting them within this bucket.

73
00:04:51,180 --> 00:04:54,130
You can see that these are not in order.

74
00:04:54,300 --> 00:05:01,090
We take all sevens all eights all nines and then we form them back into a list keeping the order that

75
00:05:01,090 --> 00:05:02,830
they're in right here.

76
00:05:02,830 --> 00:05:04,340
So this will be at the beginning.

77
00:05:04,360 --> 00:05:07,810
And then this number and then this number you can see here.

78
00:05:08,290 --> 00:05:14,080
So the numbers that had to is your last digit come before the numbers that had three or last digit.

79
00:05:14,080 --> 00:05:17,830
And then at the end we have numbers with nine as their last digit.

80
00:05:17,830 --> 00:05:22,470
Now we repeat the process except we look at the next digit to the left.

81
00:05:22,600 --> 00:05:23,810
So we're going to look at this digit.

82
00:05:23,830 --> 00:05:25,430
And this one and this one.

83
00:05:25,660 --> 00:05:26,190
OK.

84
00:05:26,380 --> 00:05:30,850
So now we group them based off of that second digit from the right.

85
00:05:31,120 --> 00:05:39,610
So if we look at this column this bucket we're talking about zero which this has it's a 0 4 0 8 0 in

86
00:05:39,610 --> 00:05:40,430
that position.

87
00:05:40,550 --> 00:05:41,430
I know 2 does.

88
00:05:41,530 --> 00:05:47,230
But then these numbers which are one digit numbers don't have any digit in that position so we just

89
00:05:47,230 --> 00:05:48,680
put them in this year bucket.

90
00:05:48,970 --> 00:05:49,770
There's a zero there.

91
00:05:49,780 --> 00:05:55,500
Right we can write any number as 0 7 is the same as 7 0 4 is just the same as 4.

92
00:05:55,990 --> 00:06:02,260
So then we end up with if we go over here we've got all the numbers that have 5 in that position.

93
00:06:02,260 --> 00:06:07,660
All the numbers that have 8 in that position and we're getting closer each pass through here.

94
00:06:07,660 --> 00:06:10,180
We're never comparing the numbers to one another.

95
00:06:10,810 --> 00:06:15,870
And now we reformed them into this list and you can see it's getting closer to being sorted.

96
00:06:15,880 --> 00:06:16,900
But we're still out there.

97
00:06:16,960 --> 00:06:21,710
So we repeat it again where we're talking about the third digit.

98
00:06:22,090 --> 00:06:24,800
So the first the second the third digit.

99
00:06:25,150 --> 00:06:25,920
Do it again.

100
00:06:26,260 --> 00:06:26,800
OK.

101
00:06:27,010 --> 00:06:33,460
So you can see the smaller numbers are already grouping up here and we have for example here five this

102
00:06:33,460 --> 00:06:36,670
number has five and it's third spot and so on.

103
00:06:36,670 --> 00:06:40,540
And then we reformed into a list again and then we have to go one more time.

104
00:06:40,690 --> 00:06:46,010
So the number of times we have to actually do this process depends on the largest number.

105
00:06:46,090 --> 00:06:47,680
How many digits it has.

106
00:06:47,680 --> 00:06:50,110
So we have a couple of four digit numbers.

107
00:06:50,110 --> 00:06:52,690
So we have to split them up four times.

108
00:06:52,690 --> 00:06:56,040
If we had a 10 digit number in here we would have to do it 10 times.

109
00:06:56,350 --> 00:06:56,780
OK.

110
00:06:57,010 --> 00:06:58,190
So here's our last time.

111
00:06:58,420 --> 00:06:59,980
So now they've been split up.

112
00:06:59,980 --> 00:07:01,770
We're talking about the fourth digit.

113
00:07:01,790 --> 00:07:03,730
None of these have a fourth digit.

114
00:07:03,730 --> 00:07:05,870
This one does some does and so on.

115
00:07:06,010 --> 00:07:09,430
And then Re-Forum them again into our list and we're done.

116
00:07:09,430 --> 00:07:14,110
So when I say we form them into the list I mean we just take the order that's already in these pockets

117
00:07:14,110 --> 00:07:17,450
so we start here then here all the way up to nine or two.

118
00:07:17,620 --> 00:07:18,930
And then we take this bucket.

119
00:07:18,970 --> 00:07:19,850
This one is empty.

120
00:07:19,870 --> 00:07:21,440
So this one and we keep going.

121
00:07:21,730 --> 00:07:23,330
And now the numbers are sorted.

122
00:07:23,410 --> 00:07:27,020
So we never made any comparisons between the numbers in our list.

123
00:07:27,110 --> 00:07:30,750
Instead we took advantage of a special property of numbers.

124
00:07:30,760 --> 00:07:34,600
So Leslie here's a nice animation of radix sort.

125
00:07:35,020 --> 00:07:36,180
All Hit Play.

126
00:07:36,220 --> 00:07:41,950
What we do is you take a look at that right most digit and regroup them in those 10 buckets.

127
00:07:41,980 --> 00:07:47,410
So if we're talking about base seven numbers instead we would have seven buckets.

128
00:07:47,450 --> 00:07:49,640
We're talking about base 10 so we have 10 buckets.

129
00:07:49,930 --> 00:07:51,060
OK.

130
00:07:51,100 --> 00:07:55,690
And now we reformed them you can see the order we're talking about we just pull them out of the buckets

131
00:07:55,840 --> 00:07:57,940
in the same order that they're already stored in.

132
00:07:58,180 --> 00:08:02,950
And now we take a look at the second digit from the right and we form them into buckets.

133
00:08:03,460 --> 00:08:04,040
OK.

134
00:08:04,360 --> 00:08:07,710
And again in this case our largest number is a four digit number.

135
00:08:07,810 --> 00:08:10,270
So we're going to have to do this process four times.

136
00:08:10,280 --> 00:08:12,000
That was two times down.

137
00:08:12,010 --> 00:08:13,380
Now we have two more.

138
00:08:13,510 --> 00:08:19,270
So now we take a look at the third number from the right and numbers that don't have a number in that

139
00:08:19,270 --> 00:08:20,020
position.

140
00:08:20,020 --> 00:08:25,150
We put them in the zero bucket and we're almost there.

141
00:08:25,150 --> 00:08:30,580
We just have to take a look at the fourth digit from the right and group things into the correct bucket

142
00:08:30,700 --> 00:08:32,410
based off of that digit.

143
00:08:32,410 --> 00:08:33,930
So we're almost there.

144
00:08:33,940 --> 00:08:37,050
So a couple things to keep in mind in order to make this work.

145
00:08:37,180 --> 00:08:41,800
We have to be able to figure out a digit in a number at a given position.

146
00:08:41,950 --> 00:08:46,320
So in the next video I'm going to talk about some helper functions we need to write.

147
00:08:46,390 --> 00:08:51,480
For example I need to be able to ask hey what is the second digit of this number what's the fourth digit

148
00:08:51,660 --> 00:08:52,720
or the first digit.

149
00:08:52,960 --> 00:08:56,240
And most languages don't give you an easy way of doing that.

150
00:08:56,260 --> 00:08:58,050
We have to write our own method to do it.

151
00:08:58,090 --> 00:09:01,990
So that's what we're going to start with before we get to the buckets anyway.

152
00:09:02,050 --> 00:09:03,380
That's radix sort.

153
00:09:03,460 --> 00:09:07,290
It is a special case of a sorting algorithm that is not a comparison sort.

154
00:09:07,330 --> 00:09:12,970
It's an integer sort that works because of a special I wouldn't say a loophole but a special property.

155
00:09:13,120 --> 00:09:19,960
And it allows us to sort numbers very fast compared to having to do comparisons anyway.

156
00:09:20,350 --> 00:09:22,450
Well implemented in the next couple of videos.

