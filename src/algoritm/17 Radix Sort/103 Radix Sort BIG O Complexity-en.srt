1
00:00:00,360 --> 00:00:01,120
Welcome back.

2
00:00:01,290 --> 00:00:02,550
All right let's wrap up.

3
00:00:02,550 --> 00:00:06,500
Radix Sort quickly by talking about its big owner station.

4
00:00:06,750 --> 00:00:13,440
Now I should start by saying that there's a little controversy around this and there's room for argument

5
00:00:13,920 --> 00:00:18,540
around radix sort but here is the generally accepted notation.

6
00:00:18,540 --> 00:00:26,400
So time complexity for best average and worst is o of and K so n is the number of things we're sorting

7
00:00:26,400 --> 00:00:28,500
the number of numbers are integers.

8
00:00:28,500 --> 00:00:31,330
K is the length of those numbers.

9
00:00:31,380 --> 00:00:34,920
What's often called the word size for a number.

10
00:00:35,040 --> 00:00:37,250
It's not really a word but the number of digits.

11
00:00:37,440 --> 00:00:42,160
So if we have really really really long digits that's important to consider.

12
00:00:42,240 --> 00:00:44,640
It's not just a constant we can ignore it.

13
00:00:44,670 --> 00:00:45,940
You know that's always the same.

14
00:00:45,960 --> 00:00:51,420
It's not like two or three and if we have really long numbers then that does significantly impact the

15
00:00:51,420 --> 00:00:55,450
time and the length of the array the number of numbers we're sorting.

16
00:00:55,490 --> 00:00:56,170
OK.

17
00:00:56,370 --> 00:00:58,740
The number of digits in those numbers.

18
00:00:58,890 --> 00:01:06,330
And the reason I say it's controversial is that this can be significantly better on paper at least than

19
00:01:06,330 --> 00:01:07,500
a comparison sort.

20
00:01:07,680 --> 00:01:09,590
Which best case for their average.

21
00:01:09,630 --> 00:01:16,830
Oh of and log again if we go over to Wikipedia the radix sort page down to efficiency there's a relatively

22
00:01:16,830 --> 00:01:17,270
large.

23
00:01:17,370 --> 00:01:22,620
Two paragraphs are making two arguments an argument and a counter argument about the time complexity

24
00:01:22,830 --> 00:01:23,890
for radix sort.

25
00:01:23,940 --> 00:01:29,130
And it has to do with how numbers are actually stored in memory on a computer.

26
00:01:29,460 --> 00:01:37,140
And if all the numbers are distinct in whatever we're sorting a list contains all distinct numbers then

27
00:01:37,140 --> 00:01:41,940
according to this K or what they called W has to be at least log n.

28
00:01:42,450 --> 00:01:50,730
So if we plug to log n for k that's going to give us and log end which is the same as what we talked

29
00:01:50,730 --> 00:01:52,570
about for a comparison sort.

30
00:01:53,130 --> 00:02:01,620
So that's one argument which is if you're dealing with all unique randomly distributed data then this

31
00:02:01,680 --> 00:02:08,050
simplifies or it doesn't simplify this becomes law again because of the way that computer store numbers

32
00:02:08,140 --> 00:02:09,120
store information.

33
00:02:09,120 --> 00:02:16,410
I don't have a great understanding on exactly why that is but if we accept that that means that radix

34
00:02:16,410 --> 00:02:23,760
sort is equally as good in the case in the average case if we're talking about and K where k is again

35
00:02:23,790 --> 00:02:25,870
it's the same as analog again.

36
00:02:25,890 --> 00:02:31,080
Then there's a bit of a argument down here that says well actually fine if you're going to say that

37
00:02:31,080 --> 00:02:35,400
radix sort isn't as fast as it claims to be then we're going to talk about some of the problems with

38
00:02:35,400 --> 00:02:40,920
comparison sorts and that there's actually shortcomings in how random numbers are compared and that

39
00:02:40,920 --> 00:02:43,330
it's a little slower than you expected.

40
00:02:43,340 --> 00:02:46,590
Sounds something that I can speak on myself at all.

41
00:02:46,740 --> 00:02:53,760
I actually have always assumed that it was for radix sort o of W N or K and where K or W is just the

42
00:02:53,760 --> 00:02:54,530
word size.

43
00:02:54,750 --> 00:03:01,680
And that's what pretty much every textbook or you know big O cheat sheet type thing that I've seen says.

44
00:03:01,680 --> 00:03:05,040
Then I went to just double check and fell into this rabbit hole.

45
00:03:05,040 --> 00:03:06,950
So keep that in mind I guess.

46
00:03:07,150 --> 00:03:14,010
So theoretically radix sort can be faster than any of the comparison sorts but apparently because of

47
00:03:14,010 --> 00:03:20,130
limitations on how computers actually store numbers in memory that may not actually be the case.

48
00:03:20,130 --> 00:03:23,380
And it might just be tied with compar. sorts.

49
00:03:23,490 --> 00:03:28,470
But either way I think that RADICH is a fun algorithm because it's sort of quirky.

50
00:03:28,500 --> 00:03:34,470
It takes advantage of a specific feature of our data of numbers and that we can use the digits in any

51
00:03:34,470 --> 00:03:39,840
given number in the number of digits in those numbers to sort things without having to ever directly

52
00:03:39,840 --> 00:03:40,860
compare any numbers.

53
00:03:40,860 --> 00:03:43,140
We're never checking what's larger which What's greater.

54
00:03:43,260 --> 00:03:47,950
We're simply moving them into buckets and then regrouping moving into buckets regrouping.

55
00:03:48,090 --> 00:03:49,710
So yeah I like radix sort.

56
00:03:49,730 --> 00:03:51,250
It's fun.

