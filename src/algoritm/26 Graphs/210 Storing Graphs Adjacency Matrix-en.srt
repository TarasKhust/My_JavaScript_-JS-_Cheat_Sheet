1
00:00:00,120 --> 00:00:01,050
Welcome back.

2
00:00:01,050 --> 00:00:04,700
Now that we know a little more about grafs we know the fancy terminology around them.

3
00:00:04,740 --> 00:00:09,840
Let's dive into the nitty gritty details of actually implementing graphs storing them or representing

4
00:00:09,840 --> 00:00:12,180
them using code.

5
00:00:12,180 --> 00:00:18,330
So going back to this image from Wikipedia it's a graph of a small subset of Wikipedia pages we have

6
00:00:18,360 --> 00:00:21,860
each vertex here is a page or an article on Wikipedia.

7
00:00:21,960 --> 00:00:27,460
And each edge each connection represents I believe a link or a reference a cross-reference.

8
00:00:27,750 --> 00:00:33,390
So if we have this chart here and somebody asks you to store it using code how the heck would you go

9
00:00:33,390 --> 00:00:34,140
about doing that.

10
00:00:34,170 --> 00:00:38,920
What data structures would you use to help you create your own classes What would you do.

11
00:00:39,150 --> 00:00:44,700
It's not easy but if we break it down what we really need to store a graph the important information

12
00:00:45,090 --> 00:00:50,540
are the nodes the actual vertices and then a way of storing the connections.

13
00:00:50,550 --> 00:00:56,310
So with like with a linked list for example we did next and previous If it was a doubly linked list

14
00:00:56,700 --> 00:00:59,510
with a binary search tree we had left and right.

15
00:00:59,520 --> 00:01:05,820
In our classes that's not going to work for a graph really because there's any number of nodes and the

16
00:01:05,820 --> 00:01:08,640
number of edges connections between a note.

17
00:01:08,880 --> 00:01:09,720
So what do we do.

18
00:01:09,960 --> 00:01:13,580
Well you could come up with any number of solutions.

19
00:01:13,650 --> 00:01:18,300
Just like with the linked list you could store lengthiest using an array just doesn't really make sense

20
00:01:18,300 --> 00:01:20,900
because why not just use an array.

21
00:01:20,910 --> 00:01:26,070
Same thing with graphs you could come up with sort of heavy handed approaches but there are two standard

22
00:01:26,070 --> 00:01:32,280
approaches that we're going to talk about that most articles blog posts deck overflow the two common

23
00:01:32,280 --> 00:01:37,590
ideas for how to do this and they're called the adjacency matrix and the adjacency list.

24
00:01:37,590 --> 00:01:42,300
So before we dive into that this is the graph that we're going to work with here try and represent this

25
00:01:42,420 --> 00:01:43,590
using code.

26
00:01:43,590 --> 00:01:46,920
It's a little slimmed down from this one but it's the same idea.

27
00:01:46,920 --> 00:01:54,520
We have vertices a vertex and then edges between A and B or A and F and we need to store that information.

28
00:01:54,890 --> 00:02:00,150
So we go into the adjacency matrix A matrix if you're not familiar with it is just a two dimensional

29
00:02:00,150 --> 00:02:04,800
structure usually implemented with nested arrays but not always.

30
00:02:04,800 --> 00:02:07,670
And basically we store information in rows and columns.

31
00:02:07,800 --> 00:02:12,570
So we could represent the connections here using a matrix something like this.

32
00:02:13,020 --> 00:02:17,550
So the way you would read this sort of a boolean matrix yes or no zero or 1.

33
00:02:17,760 --> 00:02:22,700
So between any two vertices and two nodes let's say a n d.

34
00:02:22,710 --> 00:02:25,710
So if we look at a and we go over to D.

35
00:02:25,920 --> 00:02:29,630
There is no edge zero false there's nothing there.

36
00:02:29,760 --> 00:02:35,690
But if we look at a and b go to a we look at B there is a connection there.

37
00:02:35,730 --> 00:02:41,710
If you look at a an F A over to F where there's a one right there which is how we store true.

38
00:02:41,880 --> 00:02:44,370
So this is the way of representing all the edges.

39
00:02:44,370 --> 00:02:47,230
Notice that it works the same way if we start here.

40
00:02:47,250 --> 00:02:53,070
So if we're looking at the connection between C and D for example we could start at c on this left axis

41
00:02:53,460 --> 00:02:59,610
and go over to D and we see there's a connection or we get started on C appear at the top and go down

42
00:02:59,610 --> 00:03:00,350
to D.

43
00:03:00,480 --> 00:03:05,610
And that's because it's an undirected graph meaning that it's a two way connection but we can also store

44
00:03:05,610 --> 00:03:10,850
directed graphs where only one way is stored that makes sense.

45
00:03:10,860 --> 00:03:15,810
So what we have here is a matrix you could do nested arrays to store this information.

46
00:03:15,810 --> 00:03:18,360
Zeros and ones is probably the most common but you could you could do.

47
00:03:18,360 --> 00:03:19,490
True or false you could do.

48
00:03:19,500 --> 00:03:21,380
I mean if you wanted you could do yes or no.

49
00:03:21,600 --> 00:03:23,680
But all that you're storing are the edges.

50
00:03:23,700 --> 00:03:30,270
So every time that we add a new node A new vertex we have to add an entire new row down here an entire

51
00:03:30,270 --> 00:03:33,440
new column and we'll compare and contrast the approaches and just a bit.

52
00:03:33,480 --> 00:03:38,700
Explain what these are good at what a matrix works well doing it and what it sucks at quickly.

53
00:03:38,790 --> 00:03:41,400
Here's the Wikipedia page just wanted to show some diagrams.

54
00:03:41,500 --> 00:03:46,850
Here's a representation of an undirected graph here.

55
00:03:46,850 --> 00:03:49,350
This is the graph Here's a matrix storing it.

56
00:03:49,350 --> 00:03:55,260
Here is a directed graph you can see the arrows and you can see the the matrix that we're doing or that

57
00:03:55,260 --> 00:03:57,450
we're using is no longer symmetrical.

