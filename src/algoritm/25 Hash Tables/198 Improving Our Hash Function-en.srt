1
00:00:00,330 --> 00:00:01,030
Welcome back.

2
00:00:01,200 --> 00:00:05,990
So let's try and refine or revise our hash function from the last video just a little bit.

3
00:00:06,000 --> 00:00:10,500
So it's still not going to be revolutionary it's not going to you know blow the minds of computer scientists

4
00:00:10,500 --> 00:00:11,340
around the world.

5
00:00:11,340 --> 00:00:13,320
It's going to be pretty bad.

6
00:00:13,440 --> 00:00:16,860
But it's at least a little better than what we had in the last video.

7
00:00:17,040 --> 00:00:21,550
So we're going to focus on improving its performance a little bit so that it runs closer to constant

8
00:00:21,550 --> 00:00:22,140
time.

9
00:00:22,260 --> 00:00:27,420
And then also we're going to try to increase the randomness of the distribution of things throughout

10
00:00:27,480 --> 00:00:30,060
our buckets in our hash table.

11
00:00:30,480 --> 00:00:31,890
So here's the code.

12
00:00:31,890 --> 00:00:34,070
This is the original one that we had.

13
00:00:34,260 --> 00:00:37,350
And the first thing we'll do to make it a little bit faster.

14
00:00:37,350 --> 00:00:42,900
So if our key length you know our key approaches like 200 characters or 500 characters although there

15
00:00:42,900 --> 00:00:49,110
is a maximum length to a string but let's just ignore that and say as our key becomes you know a million

16
00:00:49,110 --> 00:00:50,010
characters.

17
00:00:50,010 --> 00:00:52,820
We're not going to loop over every single character.

18
00:00:53,040 --> 00:00:55,770
All that will do is add in a minimum.

19
00:00:55,890 --> 00:01:01,280
So we're going to take math men between the length of the key and one hundred.

20
00:01:01,320 --> 00:01:05,460
So whichever one of those is smaller is what we're going to actually loop.

21
00:01:05,460 --> 00:01:09,330
So if our key is 30 characters then we're going to just loop 30 times.

22
00:01:09,330 --> 00:01:13,350
But if our key is a million characters we'll just do the first 100.

23
00:01:13,350 --> 00:01:18,510
So this is not a perfect solution but this will work for us for now just as a slight improvement.

24
00:01:18,540 --> 00:01:23,100
And it's really honestly the reason I even put this here because we're not going to work with any characters

25
00:01:23,100 --> 00:01:25,440
or any strings that are greater than 100 characters anyway.

26
00:01:25,650 --> 00:01:31,060
I just included this to really hit on the point that you want your hash function to be as fast as possible.

27
00:01:31,200 --> 00:01:35,100
But we're going to work with small strings that are like 10 characters anyway so this doesn't honestly

28
00:01:35,100 --> 00:01:36,000
matter.

29
00:01:36,000 --> 00:01:40,230
Now the second thing that we're going to do is add in prime numbers.

30
00:01:40,230 --> 00:01:45,700
So I'm not going to go into a ton of math here because frankly I don't understand half of it.

31
00:01:45,720 --> 00:01:52,080
There's a lot of I actually asked one of my friends is a math Ph.D. and I talked to him about this and

32
00:01:52,230 --> 00:02:00,120
he wasn't totally clear on exactly how it works either but hashes hash functions almost always take

33
00:02:00,120 --> 00:02:05,350
advantage of prime numbers and there's a couple of reasons but it comes down to reducing collisions.

34
00:02:05,370 --> 00:02:10,820
Meaning that we don't want data to be stored in you know in the same buckets if we can avoid it.

35
00:02:10,860 --> 00:02:16,020
We want to make sure that we are spreading data out as much as possible so that it's faster to retrieve.

36
00:02:16,020 --> 00:02:21,570
So anyway I'm not going to go into a ton of detail or really any detail because it's complicated but

37
00:02:21,630 --> 00:02:27,120
just know that prime numbers when you use them especially at the end if you are if the length of your

38
00:02:27,120 --> 00:02:33,450
table itself the array that you're storing data in is a prime number like 31 items long or 13 items

39
00:02:33,450 --> 00:02:38,150
long generally the larger the better the less likely it is for you to have collisions.

40
00:02:38,310 --> 00:02:41,630
And just to illustrate this point did a little research.

41
00:02:41,630 --> 00:02:44,110
There's this question ancora that has a really good answer.

42
00:02:44,110 --> 00:02:47,160
There's a lot of really bad answers to this question on stack overflow.

43
00:02:47,160 --> 00:02:53,340
People don't really explain it but this apparently is from some guest lecturer at MIT a while back and

44
00:02:53,340 --> 00:03:00,330
this person ran a little experiment where they hashed 10 million pairs of data key value pairs using

45
00:03:00,330 --> 00:03:06,090
different hash functions in different sizes of the actual list or the table they started in some of

46
00:03:06,090 --> 00:03:06,780
them are prime.

47
00:03:06,780 --> 00:03:08,270
And some of them were not.

48
00:03:08,460 --> 00:03:14,250
And you can see let's just take a look at these first two hash functions for 10 million pairs of data.

49
00:03:14,370 --> 00:03:15,920
This is the base.

50
00:03:15,930 --> 00:03:20,650
It's called the search costs that basically the measurement of how many collisions there were.

51
00:03:21,030 --> 00:03:29,240
So if we take a look between a prime number 8 1 9 1 that's a prime number 1.9 to collisions.

52
00:03:29,250 --> 00:03:31,940
Now if we look over here we use an even number now.

53
00:03:32,220 --> 00:03:33,370
Look at all these collisions.

54
00:03:33,420 --> 00:03:34,240
This is bad.

55
00:03:34,260 --> 00:03:35,900
We don't want more collisions.

56
00:03:35,910 --> 00:03:42,970
So just using a different table length just one number smaller to make it prime lead to it's huge.

57
00:03:43,110 --> 00:03:48,990
I mean multiple orders of magnitude decrease in the number of collisions so this is much much better

58
00:03:48,990 --> 00:03:49,640
here.

59
00:03:49,650 --> 00:03:51,830
Same thing with this different hash function.

60
00:03:51,870 --> 00:03:54,920
We have 90 is our measurement of the collisions.

61
00:03:54,930 --> 00:04:01,170
I don't really know how it's you know establish what 90 actually means but we can compare that to 4000

62
00:04:01,240 --> 00:04:06,780
196 collisions when we use a non-prime length for our list.

63
00:04:06,780 --> 00:04:11,430
So the hash table that we're storing things and it's always good to make it prime even if we don't go

64
00:04:11,430 --> 00:04:16,270
into a ton of detail on exactly why you can see here just from this table.

65
00:04:16,440 --> 00:04:21,420
Changing a prime number so it's just one number smaller but a prime number the length of the table versus

66
00:04:21,420 --> 00:04:22,330
an even number.

67
00:04:22,470 --> 00:04:27,890
Huge increase or decrease depending on how you look and look at it in the number of collisions.

68
00:04:27,900 --> 00:04:30,260
So we're going to use a prime number for our length.

69
00:04:30,600 --> 00:04:30,910
OK.

70
00:04:30,930 --> 00:04:36,130
So here's our new hash function where we have our key in our array length.

71
00:04:36,180 --> 00:04:38,990
This time we should use an array length that is prime.

72
00:04:39,270 --> 00:04:40,790
So let's try hashing.

73
00:04:40,920 --> 00:04:41,390
I don't know.

74
00:04:41,460 --> 00:04:42,250
Hello.

75
00:04:42,500 --> 00:04:45,330
And using 13 and we get 7.

76
00:04:45,450 --> 00:04:49,880
Let's try doing it by 13 we get 9.

77
00:04:49,920 --> 00:04:53,790
Let's try high 10.

78
00:04:53,790 --> 00:04:57,240
I don't know Suyin we get five.

79
00:04:57,390 --> 00:04:57,880
OK.

80
00:04:58,030 --> 00:05:02,480
So we're not really going to be able to see if our distribution is any better in such a small dataset

81
00:05:02,600 --> 00:05:05,390
right now and the length is only 13.

82
00:05:05,390 --> 00:05:07,320
You want to use a larger prime number ideally.

83
00:05:07,340 --> 00:05:12,920
But we're also only storing trivial pieces of data because this is just a a learning exercise so it

84
00:05:12,920 --> 00:05:14,150
doesn't honestly matter.

85
00:05:14,330 --> 00:05:21,150
But the improvements we made in principle at least are to speed this up so that we set a maximum.

86
00:05:21,170 --> 00:05:26,360
We're only going to loop at most 100 characters so if you pass in a huge piece of data we're just going

87
00:05:26,360 --> 00:05:32,060
to look at the first 100 and if at that point if we have two strings or two pieces of data that are

88
00:05:32,060 --> 00:05:35,930
identical for the first 100 characters that's OK they'll collide.

89
00:05:35,930 --> 00:05:41,720
We'll store them in the same place if you know that all of your data follows that pattern and you are

90
00:05:41,720 --> 00:05:45,590
storing a thousand character strings in the first 100 is always the same.

91
00:05:45,650 --> 00:05:47,380
And it was the last couple that were different.

92
00:05:47,690 --> 00:05:52,250
Well then we'd probably tweak our out for them to start at the end of the string for example or we do

93
00:05:52,250 --> 00:05:52,920
something.

94
00:05:53,000 --> 00:05:58,610
But just for this sort of all purpose example we're going to cut it off at 100 characters really just

95
00:05:58,610 --> 00:06:04,010
to show you that you should consider that even if it's not practical for us then also we're adding in

96
00:06:04,010 --> 00:06:09,140
a prime number and we want our array length to be a prime number as well just to decrease the number

97
00:06:09,140 --> 00:06:15,290
of collisions to make our data more distributed more random even though random is not really the correct

98
00:06:15,290 --> 00:06:19,270
term because prime numbers aren't actually truly random in their distribution.

99
00:06:19,280 --> 00:06:21,220
Not my wheelhouse at all.

100
00:06:21,320 --> 00:06:26,420
But anyway whether this is a great hash function or not and it's definitely not it still works well

101
00:06:26,420 --> 00:06:28,680
enough for us to implement a basic hash table.

102
00:06:28,680 --> 00:06:30,390
So that's what we're going to work towards next.

103
00:06:30,500 --> 00:06:35,390
What we have to talk about first is how we handle collisions because we will see if I can reproduce

104
00:06:35,390 --> 00:06:39,950
to a mid-stride doing like what does pink give us point.

105
00:06:40,670 --> 00:06:40,980
OK.

106
00:06:41,000 --> 00:06:42,230
That gives us five as well.

107
00:06:42,380 --> 00:06:45,810
So what happens when cyan and pink have the same index.

108
00:06:45,830 --> 00:06:46,670
What do we do.

109
00:06:46,670 --> 00:06:48,510
Do we store them both there.

110
00:06:48,520 --> 00:06:51,580
Do we make the list longer.

111
00:06:51,650 --> 00:06:52,630
How do we handle it.

112
00:06:52,640 --> 00:06:54,080
That's what we've talked about in the next video.

113
00:06:54,080 --> 00:06:55,380
There are two solutions.

114
00:06:55,490 --> 00:06:58,880
And then we'll actually go and implement one of them create a full hash table.

115
00:06:58,880 --> 00:06:59,950
So that's coming up next.

116
00:06:59,960 --> 00:07:02,950
This is our basic hash function only works for strings.

117
00:07:02,990 --> 00:07:04,310
We improved a little bit.

118
00:07:04,340 --> 00:07:10,010
It's sort of constant time and also we add to prime numbers in so that it's slightly better distributed.

119
00:07:10,090 --> 00:07:10,430
OK.

